<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Serendipity</title>
  
  <subtitle>不期而遇的美好</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-07-17T10:08:14.396Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>lemon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2020/12/17/Redis/Redis/"/>
    <id>http://example.com/2020/12/17/Redis/Redis/</id>
    <published>2020-12-17T07:56:28.103Z</published>
    <updated>2020-07-17T10:08:14.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 <a href="http://www.redis.cn/topics/data-types-intro.html#strings">字符串（strings）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hashes">散列（hashes）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#lists">列表（lists）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sets">集合（sets）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sorted-sets">有序集合（sorted sets）</a> 与范围查询， <a href="http://www.redis.cn/topics/data-types-intro.html#bitmaps">bitmaps</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hyperloglogs">hyperloglogs</a> 和 <a href="http://www.redis.cn/commands/geoadd.html">地理空间（geospatial）</a> 索引半径查询。 Redis 内置了 <a href="http://www.redis.cn/topics/replication.html">复制（replication）</a>，<a href="http://www.redis.cn/commands/eval.html">LUA脚本（Lua scripting）</a>， <a href="http://www.redis.cn/topics/lru-cache.html">LRU驱动事件（LRU eviction）</a>，<a href="http://www.redis.cn/topics/transactions.html">事务（transactions）</a> 和不同级别的 <a href="http://www.redis.cn/topics/persistence.html">磁盘持久化（persistence）</a>， 并通过 <a href="http://www.redis.cn/topics/sentinel.html">Redis哨兵（Sentinel）</a>和自动 <a href="http://www.redis.cn/topics/cluster-tutorial.html">分区（Cluster）</a>提供高可用性（high availability）。</p><p><strong>学习：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">官网：&lt;https:&#x2F;&#x2F;redis.io&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">中文官网：&lt;http:&#x2F;&#x2F;www.redis.cn&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">视频：B站狂神说</span><br></pre></td></tr></table></figure><h3 id="Windows下载"><a href="#Windows下载" class="headerlink" title="Windows下载"></a>Windows下载</h3><p>下载地址：<a href="https://github.com/redis/redis/releases">https://github.com/redis/redis/releases</a></p><p>解压</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">启动服务：</span><br><span class="line">双击redis-server</span><br><span class="line"></span><br><span class="line">打开客户端：</span><br><span class="line">双击redis-cli</span><br></pre></td></tr></table></figure><h3 id="Linux下载"><a href="#Linux下载" class="headerlink" title="Linux下载"></a>Linux下载</h3><p>下载地址：<a href="http://www.redis.cn/">http://www.redis.cn/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">解压到--&gt;usr/local</span><br><span class="line"></span><br><span class="line">生成程序：</span><br><span class="line">yum install gcc-c++</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">程序路径--&gt;usr/local/bin</span><br><span class="line"></span><br><span class="line">启动服务：</span><br><span class="line">在usr/local/bin下输入：redis-server</span><br><span class="line"></span><br><span class="line">启动客户端：</span><br><span class="line">在usr/local/bin下输入：redis-cli</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>后台启动：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">修改redis.conf:</span><br><span class="line">找到：daemonize:no改为yes</span><br><span class="line"></span><br><span class="line">启动服务：带上redis.conf一起启动</span><br><span class="line">在usr/local/bin下输入：redis-server /路劲/redis.conf</span><br><span class="line"></span><br><span class="line">启动客户端：</span><br><span class="line">在usr/local/bin下输入：redis-cli</span><br></pre></td></tr></table></figure><p><strong>性能测试：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-benchmark -h localhost -p <span class="number">6379</span> -c <span class="number">100</span> -n <span class="number">100000</span></span><br></pre></td></tr></table></figure><p>测试100个线程写入10万数据的时间</p><h3 id="redis常用命令"><a href="#redis常用命令" class="headerlink" title="redis常用命令"></a>redis常用命令</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">生成key:</span><br><span class="line">set name zhangsan</span><br><span class="line"></span><br><span class="line">拿到value：</span><br><span class="line">get name</span><br><span class="line"></span><br><span class="line">切换数据库：</span><br><span class="line">select 数据库号码（默认<span class="number">16</span>个数据库）</span><br><span class="line"></span><br><span class="line">查看所有key:</span><br><span class="line">keys *</span><br><span class="line"></span><br><span class="line">清除当前数据库：</span><br><span class="line">flushdb</span><br><span class="line"></span><br><span class="line">清除全部数据库：</span><br><span class="line">flushall</span><br><span class="line"></span><br><span class="line">查看key是否存在：</span><br><span class="line">exists key名字</span><br><span class="line"></span><br><span class="line">移除key：</span><br><span class="line">move key <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">设置value过期时间：</span><br><span class="line">expire name 时间</span><br><span class="line"></span><br><span class="line">查看剩余过期时间：</span><br><span class="line">ttl name</span><br><span class="line"></span><br><span class="line">查看key类型：</span><br><span class="line">type key</span><br><span class="line">    </span><br><span class="line">value后追加字符串：</span><br><span class="line">    append key value</span><br><span class="line">        </span><br></pre></td></tr></table></figure><h3 id="redis基础知识"><a href="#redis基础知识" class="headerlink" title="redis基础知识"></a>redis基础知识</h3><blockquote><p>Redis是单线程的！</p></blockquote><p>Redis是基于内存操作的，CPU不是Redis的瓶颈。</p><p><strong>速度快的原因：</strong></p><p>官方数据：100000+的QPS。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>核心：redis将所有数据放在内存种，所以单线程去操作效率最高，多线程会引起上下文操作。对于内存系统，没有上下文操作效率是最高的。</span><br></pre></td></tr></table></figure><h2 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="五大数据类型"></a>五大数据类型</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>最常用的最基本的数据类型，就是常用的K-V键值对。</p><p>Redis的操作都是原子性的，就是一个事务是不可分割的最小单元，事务中的所有操作要么都完成，要么都失败。不用考虑并发问题。适用于自增自减等。</p><p><strong>命令：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">set key value</span><br><span class="line"></span><br><span class="line">get value</span><br><span class="line"></span><br><span class="line">append key value #如果key不存在，相当于set key value</span><br><span class="line"></span><br><span class="line">keys * #查看所有key</span><br><span class="line">        </span><br><span class="line">Strlen    key #获取字符串长度</span><br><span class="line">    </span><br><span class="line">##i++##</span><br><span class="line">    set num <span class="number">0</span>  </span><br><span class="line">    incr num   #num++</span><br><span class="line">    decr num   #num--</span><br><span class="line">    incrby num 10   #num+10</span><br><span class="line">    decrby num 10   #num-10</span><br><span class="line">    </span><br><span class="line">##字符串范围##</span><br><span class="line">    set key <span class="string">&quot;lemon,hello&quot;</span></span><br><span class="line">    </span><br><span class="line">    getrange key 0 3 #截取字符串[0,3]</span><br><span class="line">    </span><br><span class="line">    getrange key 0 -1 #和get key 一样</span><br><span class="line">    </span><br><span class="line">##替换##</span><br><span class="line">    set key <span class="string">&quot;lemon,hello&quot;</span></span><br><span class="line">    </span><br><span class="line">    setrange key 1 xx  #替换指定位置开始的字符串</span><br><span class="line">    </span><br><span class="line">####</span><br><span class="line">    setex  #(set with expire) 设置过期时间</span><br><span class="line">    </span><br><span class="line">    setnx  #(set if not exist)  不存在则设置（在分布式锁中经常使用）</span><br><span class="line">    </span><br><span class="line">##批量操作##</span><br><span class="line">    mset k1 v1 k2 v2</span><br><span class="line">    mget k1 v1 k2 v2</span><br><span class="line">    msetnx k1 v1 k3 v3 #msetnx是一个原子操作，要么全部成功，要么全部失败。</span><br><span class="line">    </span><br><span class="line">##对象##</span><br><span class="line">    set user: 1 &#123;name:zhangsan,age:18&#125; #设置一个user:1对象，值为json字符</span><br><span class="line">        </span><br><span class="line">####</span><br><span class="line">    getset key value #如果不存在，则返回nil</span><br><span class="line">        #如果存在，获取原来的值，并设置新的值</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p><strong>String的使用场景：</strong></p><ul><li>计数器</li><li>统计多单位的数量</li><li>粉丝数</li><li>对象缓存存储</li></ul><h3 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h3><p>列表，按照Sting元素插入顺序排序。可以实现栈、队列功能，可以实现最新消息排行榜功能。</p><p><strong>命令：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#####</span><br><span class="line">lpush key value # 将一个值或者多个值，插入列表头部（左）</span><br><span class="line">    </span><br><span class="line">    lrange key 0 -1   #查看key下所有的value</span><br><span class="line">    </span><br><span class="line">    lrange key 0 1   # 查看0-1区间的value</span><br><span class="line">    </span><br><span class="line">    rpush key value  # 将一个值或者多个值，插入列表尾部（右）</span><br><span class="line">    </span><br><span class="line">    lpop key #移除 key的第一个元素</span><br><span class="line">    rpop key #移除 key的最后一个元素</span><br><span class="line">    </span><br><span class="line">    lindex key 0 #通过下标获得list中的某一个值</span><br><span class="line">    </span><br><span class="line">    llen key #返回列表的长度</span><br><span class="line">    </span><br><span class="line">    ltrim key 1 2 #截取[1,2]区间的值留下</span><br><span class="line">    </span><br><span class="line">    rpoplpush key otherkey #移除列表的最后一个元素，移动到新的列表中</span><br><span class="line">    </span><br><span class="line">    lset list 0 item #如果存在，更新当前下标的值，不存在就报错</span><br><span class="line">    </span><br><span class="line">    linsert list before/after value value #将一个值插入到列表中已存在的某个值前后</span><br><span class="line">   </span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li>list实际上是一个链表，左右都可以插入。</li><li>如果key不存在，创建新的链表。</li><li>如果key存在，新增内容。</li><li>如果移除了所有值，空链表，也代表不存在！</li><li>在两边插入或者改动值，效率最高。</li></ul><p><strong>使用场景：</strong></p><ul><li>消息队列</li><li>栈</li></ul><h3 id="set（集合）"><a href="#set（集合）" class="headerlink" title="set（集合）"></a>set（集合）</h3><p>String类型组成的无序集合，通过hash表实现，不允许重复。可以实现数据去重、求并集交集等。</p><p><strong>命令：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#############</span><br><span class="line">    sadd key value    #添加值</span><br><span class="line">    smembers key      #查看指定set的所有值</span><br><span class="line">    </span><br><span class="line">    sismember key value  #判断某个值是否在set中</span><br><span class="line">    scard key      #获取set集合中的内容元素个数</span><br><span class="line">    </span><br><span class="line">    srem key value   #移除set中的指定元素</span><br><span class="line">    </span><br><span class="line">    srandmember myset   #随机获取set中的一个元素</span><br><span class="line">    </span><br><span class="line">    spop ke   #随机移除一个元素</span><br><span class="line">    </span><br><span class="line">    smove myset myset2 value#将一个指定的值移动到另一个set集合</span><br><span class="line">    </span><br><span class="line">################################</span><br><span class="line">    查看两个set的交集、并集、差集（不同的）</span><br><span class="line">    sdiff key1 key2    #差集</span><br><span class="line">    sinter key1 key2   #交集</span><br><span class="line">    sunion key1 key2   #并集</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>场景：</p><ul><li>微博粉丝、共同关注</li><li>实现数据去重、求并集交集</li></ul><h3 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h3><p>Sring元素组成的字典，适合存储对象。</p><p><strong>命令：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">###################</span><br><span class="line">    hset myhash field helo  #set一个具体的 key-value</span><br><span class="line">    </span><br><span class="line">    hget myhash field #获取一个字段值</span><br><span class="line">    </span><br><span class="line">    hmset myhash2 ke1 v1 ke2 v2 #set多个键值对</span><br><span class="line">    </span><br><span class="line">    hmget myhash2 ke1  ke2   # 获取多个字段值</span><br><span class="line">    </span><br><span class="line">    hgetall key   #获取所有的键值对</span><br><span class="line">    </span><br><span class="line">    hdel myhash field #删除hash指定key字段</span><br><span class="line">    </span><br><span class="line">    hlen key   #获取hash表的字段数量</span><br><span class="line">    </span><br><span class="line">    hkeys key #获取所有的字段</span><br><span class="line">    </span><br><span class="line">    hvals key  #获取所有的value</span><br><span class="line">    </span><br><span class="line">    hexists key # 判断是否存在</span><br><span class="line">    </span><br><span class="line">###################</span><br><span class="line">    incr decr incrby decrby hsetnx</span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure><p><strong>场景：</strong></p><h3 id="Zset（有序集合）"><a href="#Zset（有序集合）" class="headerlink" title="Zset（有序集合）"></a>Zset（有序集合）</h3><p>有序唯一，通过分数将集合中的成员进行从小到大排序。可以实现分数排行榜等场景。</p><p>在set的基础上，加了一个值。</p><p>set k1 v1</p><p>zset k1 score v1</p><p><strong>命令：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">###############</span><br><span class="line">    </span><br><span class="line">zadd myzset <span class="number">1</span> one</span><br><span class="line">    </span><br><span class="line">    zrange myzset <span class="number">0</span> -<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">###############</span><br><span class="line">    排序</span><br><span class="line">    zrangebyscore key -inf +inf   #按照value升序排列</span><br><span class="line">    </span><br><span class="line">    zrangebyscore key -inf +inf withscore   #升序并将value也输出出来</span><br><span class="line">    </span><br><span class="line">    zrevrangebyscore key 0 -1 #按照value降序排列</span><br><span class="line">    </span><br><span class="line">    zrange key 0 -1 # 查看所有</span><br><span class="line">    </span><br><span class="line">    zrem key value  # 移除有序集合中的指定元素</span><br><span class="line">    </span><br><span class="line">    zcard key  #获取有序集合中的个数</span><br><span class="line">    </span><br><span class="line">    zcount key 1 2 #获取指定区间的成员个数</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>应用场景：</p><ul><li>分数排行榜</li></ul><h2 id="Redis的基本事务操作"><a href="#Redis的基本事务操作" class="headerlink" title="Redis的基本事务操作"></a>Redis的基本事务操作</h2><p>redis的单条命令都具有原子性，但是事务不保证原子性。</p><p>redis事务没有隔离级别的概念。</p><p>所有的命令在事务中，并没有直接被执行，只有发起执行命令的时候才会执行！Exec</p><p>redis的事务：</p><ul><li>开启事务（multi）</li><li>命令入队（…..）</li><li>执行事务（exec）</li></ul><p><strong>命令：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#开启事务</span><br><span class="line">multi</span><br><span class="line"></span><br><span class="line">#命令入队</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">#执行事务</span><br><span class="line">exec</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>异常有两种：</p><blockquote><p>编译型异常，错误命令会报错，执行事务整个事务也会错误。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">###############</span><br><span class="line">    multi</span><br><span class="line">    </span><br><span class="line">    错误命令</span><br><span class="line">    </span><br><span class="line">    正确命令</span><br><span class="line">    </span><br><span class="line">    exec --------------整个事务异常</span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure><blockquote><p>运行时异常，输入命令时正常，执行事务时，正确命令正常执行，错误命令抛出异常。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">###################</span><br><span class="line">    multi</span><br><span class="line">    </span><br><span class="line">    正确的命令（但是运行会报错）</span><br><span class="line">    </span><br><span class="line">    正确命令</span><br><span class="line">    </span><br><span class="line">    exec---------事务正常执行，错误的地方抛出异常，正确的正常执行。</span><br></pre></td></tr></table></figure><blockquote><p>Redis监视测试  —– watch（相当于加锁）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">正常执行#########</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; set out <span class="number">0</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money  #监视money</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; multi</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; decrby money <span class="number">20</span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; incrby out <span class="number">20</span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; exec</span><br><span class="line"><span class="number">1</span>) (integer) <span class="number">80</span></span><br><span class="line">2) (integer) 20           #正常执行</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; </span><br></pre></td></tr></table></figure><p> <strong>测试多线程修改值，使用watch可以当作redis的乐观锁操作！</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; watch money</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; multi</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; decrby money <span class="number">20</span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; incrby out <span class="number">20</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec  #在执行事务之前另一个线程修改了money的值，被watch观察到，导致失败。</span><br><span class="line">(nil)</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/07/16/cyxT2Jq4h7PkOAb.png" alt="image-20200716093400841"></p><h3 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h3><p>Redis官方推荐的Java连接开发工具，使用Java操作redis中间件。</p><p>1.导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.72<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.编码测试</p><p><img src="https://i.loli.net/2020/07/16/ezUtCrd9nwFI1hT.png" alt="image-20200716095433135"></p><h3 id="Spring-Boot-整合Redis"><a href="#Spring-Boot-整合Redis" class="headerlink" title="Spring Boot 整合Redis"></a>Spring Boot 整合Redis</h3><p>springboot操作数据：spring-data jpa jdbc mongodb redis</p><p>Spring Data 也是和spirng boot齐名的项目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(RedisOperations.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(RedisProperties.class)</span></span><br><span class="line"><span class="meta">@Import(&#123; LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = &quot;redisTemplate&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"><span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"><span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.配置连接</p><p><strong>如何了解怎么去配置一个新的东西？</strong></p><p>==看源码==</p><p>比如redis:</p><ul><li><p>先去依赖中找到spring-boot-autoconfigure–》spring.factories</p></li><li><p>然后搜索redis,进入RedisAutoConfiguration类</p></li><li><p>可以看到@EnableConfigurationProperties({RedisProperties.class})注解</p></li><li><p>进入RedisProperties.class,可以看到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@ConfigurationProperties(</span><br><span class="line">    prefix &#x3D; &quot;spring.redis&quot;</span><br><span class="line">)</span><br><span class="line">以及下面的配置项</span><br></pre></td></tr></table></figure></li><li><p>然后在application.properties文件中，配置，前缀为spring.redis+配置项。</p></li></ul><p>配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br></pre></td></tr></table></figure><p>3.测试</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h1&gt;&lt;h2 id=&quot;Redis入门&quot;&gt;&lt;a href=&quot;#Redis入门&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>启动线程的正确和错误方式以及原理解析</title>
    <link href="http://example.com/2020/12/17/java%E5%B9%B6%E5%8F%91/Java%E5%B9%B6%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89--%E5%90%AF%E5%8A%A8%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%92%8C%E9%94%99%E8%AF%AF%E6%96%B9%E5%BC%8F%E4%BB%A5%E5%8F%8A%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://example.com/2020/12/17/java%E5%B9%B6%E5%8F%91/Java%E5%B9%B6%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89--%E5%90%AF%E5%8A%A8%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%92%8C%E9%94%99%E8%AF%AF%E6%96%B9%E5%BC%8F%E4%BB%A5%E5%8F%8A%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</id>
    <published>2020-12-17T07:02:25.000Z</published>
    <updated>2020-12-17T07:48:56.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java并发（二）–启动线程的正确和错误方式以及原理解析"><a href="#Java并发（二）–启动线程的正确和错误方式以及原理解析" class="headerlink" title="Java并发（二）–启动线程的正确和错误方式以及原理解析"></a>Java并发（二）–启动线程的正确和错误方式以及原理解析</h2><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>[TOC]</p><h3 id="1-start-和-run-方法比较"><a href="#1-start-和-run-方法比较" class="headerlink" title="1. start() 和 run() 方法比较"></a>1. start() 和 run() 方法比较</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable runnable = () -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">        &#125;;</span><br><span class="line">        runnable.run();</span><br><span class="line">        <span class="keyword">new</span> Thread(runnable).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200330183914659.png" alt="1585552881113"></p><p>直接调用run()方法是由主线程执行，而通过start（）方法才是我们创建的线程进行执行的。</p><h3 id="2-start-方法原理解析"><a href="#2-start-方法原理解析" class="headerlink" title="2. start() 方法原理解析"></a>2. start() 方法原理解析</h3><h4 id="2-1-start（）方法含义"><a href="#2-1-start（）方法含义" class="headerlink" title="2.1 start（）方法含义"></a>2.1 start（）方法含义</h4><ol><li>启动新线程，通知JVM在有空闲情况下启动新线程。具体启动时间有线程调度器决定。</li><li>准备工作<ul><li>线程处于就绪状态</li></ul></li><li>不能重复调用start（）方法。</li></ol><h4 id="2-2-start-源码解析"><a href="#2-2-start-源码解析" class="headerlink" title="2.2 start() 源码解析"></a>2.2 start() 源码解析</h4><ol><li><p>启动新线程检查线程状态</p><p>首先会判断线程状态，如果线程状态不等于0，就会抛出IllegalThreadStateException()，</p><p>而线程调用start方法后，线程状态就会改变。</p></li><li><p>加入线程组</p></li><li><p>调用start0()方法</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        零状态值对应于状态<span class="keyword">new</span></span><br><span class="line">        <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line"></span><br><span class="line">       添加线程组</span><br><span class="line">        group.add(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            start0();</span><br><span class="line">            started = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">                    group.threadStartFailed(<span class="keyword">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">                <span class="comment">/* do nothing. If start0 threw a Throwable then</span></span><br><span class="line"><span class="comment">                  it will be passed up the call stack */</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-run-方法原理解析"><a href="#3-run-方法原理解析" class="headerlink" title="3. run() 方法原理解析"></a>3. run() 方法原理解析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">            target.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>两种情况：</p><ul><li>第一种直接调用，就相当于调用普通方法</li><li>第二种，通过start方法来间接调用run()，来执行新线程的任务。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Java并发（二）–启动线程的正确和错误方式以及原理解析&quot;&gt;&lt;a href=&quot;#Java并发（二）–启动线程的正确和错误方式以及原理解析&quot; class=&quot;headerlink&quot; title=&quot;Java并发（二）–启动线程的正确和错误方式以及原理解析&quot;&gt;&lt;/a&gt;Ja</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    <category term="并发编程" scheme="http://example.com/categories/java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java并发" scheme="http://example.com/tags/Java%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>11.JSTL表达式.md</title>
    <link href="http://example.com/2020/12/17/JSP%E5%92%8CServlet/11.JSTL%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://example.com/2020/12/17/JSP%E5%92%8CServlet/11.JSTL%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2020-12-17T07:02:25.000Z</published>
    <updated>2020-12-17T08:01:02.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JSTL表达式"><a href="#JSTL表达式" class="headerlink" title="JSTL表达式"></a>JSTL表达式</h2><p>需要引入2个jar ：jstl.jar   standard.jar<br>引入tablib  :<br>&lt;%@ taglib uri=”<a href="http://java.sun.com/jsp/jstl/core&quot;">http://java.sun.com/jsp/jstl/core&quot;</a> prefix=”c” %&gt;<br>其中prefix=”c” :前缀</p><p>核心标签库：  通用标签库、条件标签库  迭代标签库</p><p>a.通用标签库<br>&lt;c:set&gt;赋值<br>i:<br>在某个作用域之中（4个范围对象），给某个变量赋值<br>    &lt;%–<br>        request.setAttribute(“name”, “zhangsan”) ;<br>    –%&gt;<br>        &lt;c:set var=”name”    value=”zhangsan”   scope=”request”/&gt;<br>        ${requestScope.name }</p><p>&lt;c:set var=”变量名”    value=”变量值”   scope=”4个范围对象的作用域”/&gt;</p><p>ii:<br>给普通对象赋值<br>在某个作用域之中（4个范围对象），给某个对象的属性复制 （此种写法，不能指定scope属性）</p><pre><code>    &lt;c:set target=&quot;$&#123;requestScope.student&#125;&quot; property=&quot;sname&quot;  value=&quot;zxs&quot; /&gt;</code></pre><p>给map对象赋值<br>        &lt;c:set target=”${requestScope.countries}” property=”cn”  value=”中国” /&gt;</p><p>&lt;c:set target=”对象” property=”对象的属性”  value=”赋值” /&gt;</p><p>注意 &lt;c:set&gt;可以给不存在的变量赋值 （但不能给不存在的对象赋值）</p><p>&lt;c:out&gt;  ：显示<br>true:&lt;c:out value=’<a href="https://www.baidu.com">百度</a>‘ default=”当value为空的，显示的默认值” escapeXml=”true” /&gt;<br>false：    &lt;c:out value=’<a href="https://www.baidu.com">百度</a>‘ escapeXml=”false” /&gt;</p><p>&lt;c:remove &gt;：删除属性<br>&lt;c:remove var=”a” scope=”request”/&gt;</p><p>选择：<br>if(boolean)<br>单重选择<br>&lt;c:if test=”” &gt;</p><p>if else if… esle if… else  /switch</p><p>&lt;c:choose&gt;<br>    &lt;c:when test=”…”&gt;   </c:when><br>    &lt;c:when test=”…”&gt;   </c:when><br>    &lt;c:when test=”…”&gt;   </c:when><br>    &lt;c:otherwise&gt;   </c:otherwise><br></c:choose></p><p>在使用 test=”” 一定要注意后面是否有空格<br>例如：test=”${10&gt;2 }”   true<br>     test=”${10&gt;2 } “  非true</p><p>循环（迭代标签库）<br>for(int i=0;i&lt;5;i++)<br>    &lt;c:forEach  var=”name” items=”${requestScope.names }” &gt;<br>        -${name }-<br>    </c:forEach></p><p>for(String str:names)<br>    &lt;c:forEach  var=”student” items=”${requestScope.students }” &gt;<br>        ${student.sname }-${student.sno }</p><pre><code>&lt;/c:forEach&gt;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JSTL表达式&quot;&gt;&lt;a href=&quot;#JSTL表达式&quot; class=&quot;headerlink&quot; title=&quot;JSTL表达式&quot;&gt;&lt;/a&gt;JSTL表达式&lt;/h2&gt;&lt;p&gt;需要引入2个jar ：jstl.jar   standard.jar&lt;br&gt;引入tablib  :&lt;</summary>
      
    
    
    
    <category term="jsp" scheme="http://example.com/categories/jsp/"/>
    
    
    <category term="jsp" scheme="http://example.com/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>13.监听器.md</title>
    <link href="http://example.com/2020/12/17/JSP%E5%92%8CServlet/13.%E7%9B%91%E5%90%AC%E5%99%A8/"/>
    <id>http://example.com/2020/12/17/JSP%E5%92%8CServlet/13.%E7%9B%91%E5%90%AC%E5%99%A8/</id>
    <published>2020-12-17T07:02:25.000Z</published>
    <updated>2020-12-17T08:01:02.241Z</updated>
    
    <content type="html"><![CDATA[<h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><p><img src="https://images0.cnblogs.com/blog2015/449064/201503/301700508104329.jpg"></p><p>参考博客：<a href="https://www.cnblogs.com/w-wfy/p/6425357.html">https://www.cnblogs.com/w-wfy/p/6425357.html</a></p><p>1 什么是web监听器？</p><p>　　web监听器是一种Servlet中的特殊的类，它们能帮助开发者监听web中的特定事件，比如ServletContext,HttpSession,ServletRequest的创建和销毁；变量的创建、销毁和修改等。可以在某些动作前后增加处理，实现监控。</p><p>2 监听器常用的用途</p><p>　　通常使用Web监听器做以下的内容：</p><p>　　统计在线人数，利用HttpSessionLisener</p><p>　　加载初始化信息：利用ServletContextListener</p><p>　　统计网站访问量</p><p>　　实现访问监控</p><p>3 接下里看看一个监听器的创建以及执行过程</p><p> 　　首先需要创建一个监听器，实现某种接口，例如我想实现一个对在线人数的监控，可以创建如下的监听器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> userNumber = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent arg0)</span> </span>&#123;</span><br><span class="line">        userNumber++;</span><br><span class="line">        arg0.getSession().setAttribute(<span class="string">&quot;userNumber&quot;</span>, userNumber);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent arg0)</span> </span>&#123;</span><br><span class="line">        userNumber--;</span><br><span class="line">        arg0.getSession().setAttribute(<span class="string">&quot;userNumber&quot;</span>, userNumber);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　然后在web.xml中配置该监听器，在web-app中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;listener&gt;</span><br><span class="line">      &lt;listener-class&gt;com.test.MyListener&lt;&#x2F;listener-class&gt;</span><br><span class="line">  &lt;&#x2F;listener&gt;</span><br></pre></td></tr></table></figure><p>　在JSP中添加访问人数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    在线人数：&lt;%&#x3D;session.getAttribute(&quot;userNumber&quot;) %&gt;&lt;br&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>当我使用我的浏览器访问时，执行结果如下：</p><p><img src="E:\待办\Java-Butterfly-Transform\学习笔记\Servlet和JSP\assets\1590046996682.png" alt="1590046996682"></p><p>由于打开另一个浏览器访问，相当于另一个会话，因此在线人数会增加。</p><p>　　对于3.0版本的Servlet来说，还支持使用注解的方式进行配置。</p><p>　　那么接下来看看都有哪些监听器以及方法吧！</p><h2 id="监听器的分类"><a href="#监听器的分类" class="headerlink" title="监听器的分类"></a>监听器的分类</h2><p>　　1 按照监听的对象划分：</p><p>　　按照监听对象的不同可以划分为三种：</p><p>　　ServletContext监控：对应监控application内置对象的创建和销毁。</p><p>　　当web容器开启时，执行contextInitialized方法；当容器关闭或重启时，执行contextDestroyed方法。</p><p>　　实现方式：直接实现ServletContextListener接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class MyServletContextListener implements ServletContextListener&#123;</span><br><span class="line">    public void contextDestroyed(ServletContextEvent sce) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public void contextInitialized(ServletContextEvent sce) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HttpSession监控：对应监控session内置对象的创建和销毁。</p><p>　　当打开一个新的页面时，开启一个session会话，执行sessionCreated方法；当页面关闭session过期时，或者容器关闭销毁时，执行sessionDestroyed方法。</p><p>　　实现方式：直接实现HttpSessionListener接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HttpSession监控：对应监控session内置对象的创建和销毁。</span><br><span class="line"></span><br><span class="line">　　当打开一个新的页面时，开启一个session会话，执行sessionCreated方法；当页面关闭session过期时，或者容器关闭销毁时，执行sessionDestroyed方法。</span><br><span class="line"></span><br><span class="line">　　实现方式：直接实现HttpSessionListener接口：</span><br></pre></td></tr></table></figure><p>ServletRequest监控：对应监控request内置对象的创建和销毁。</p><p>　　当访问某个页面时，出发一个request请求，执行requestInitialized方法；当页面关闭时，执行requestDestroyed方法。</p><p>　　实现方式，直接实现ServletRequestListener接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class MyServletRequestListener implements ServletRequestListener&#123;</span><br><span class="line">    public void requestDestroyed(ServletRequestEvent arg0) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public void requestInitialized(ServletRequestEvent arg0) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2 按照监听事件划分：</p><p>　　2.1 监听事件自身的创建和销毁：同上面的按对象划分。</p><p>　　2.2 监听属性的新增、删除和修改：</p><p>　　监听属性的新增、删除和修改也是划分成三种，分别针对于ServletContext、HttpSession、ServletRequest对象：</p><p>　　ServletContext，实现ServletContextAttributeListener接口：</p><p>　　通过调用ServletContextAttribtueEvent的getName方法可以得到属性的名称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class MyServletContextAttrListener implements ServletContextAttributeListener&#123;</span><br><span class="line"></span><br><span class="line">    public void attributeAdded(ServletContextAttributeEvent hsbe) &#123;</span><br><span class="line">        System.out.println(&quot;In servletContext added :name &#x3D; &quot;+hsbe.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void attributeRemoved(ServletContextAttributeEvent hsbe) &#123;</span><br><span class="line">        System.out.println(&quot;In servletContext removed :name &#x3D; &quot;+hsbe.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void attributeReplaced(ServletContextAttributeEvent hsbe) &#123;</span><br><span class="line">        System.out.println(&quot;In servletContext replaced :name &#x3D; &quot;+hsbe.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HttpSession，实现HttpSessionAttributeListener接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class MyHttpSessionAttrListener implements HttpSessionAttributeListener&#123;</span><br><span class="line"></span><br><span class="line">    public void attributeAdded(HttpSessionBindingEvent hsbe) &#123;</span><br><span class="line">        System.out.println(&quot;In httpsession added:name &#x3D; &quot;+hsbe.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void attributeRemoved(HttpSessionBindingEvent hsbe) &#123;</span><br><span class="line">        System.out.println(&quot;In httpsession removed:name &#x3D; &quot;+hsbe.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void attributeReplaced(HttpSessionBindingEvent hsbe) &#123;</span><br><span class="line">        System.out.println(&quot;In httpsession replaced:name &#x3D; &quot;+hsbe.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　ServletRequest，实现ServletRequestAttributeListener接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class MyServletRequestAttrListener implements ServletRequestAttributeListener&#123;</span><br><span class="line"></span><br><span class="line">    public void attributeAdded(ServletRequestAttributeEvent hsbe) &#123;</span><br><span class="line">        System.out.println(&quot;In servletrequest added :name &#x3D; &quot;+hsbe.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void attributeRemoved(ServletRequestAttributeEvent hsbe) &#123;</span><br><span class="line">        System.out.println(&quot;In servletrequest removed :name &#x3D; &quot;+hsbe.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void attributeReplaced(ServletRequestAttributeEvent hsbe) &#123;</span><br><span class="line">        System.out.println(&quot;In servletrequest replaced :name &#x3D; &quot;+hsbe.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　2.3 监听对象的状态：</p><p>　　针对某些POJO类，可以通过实现HttpSessionBindingListener接口，监听POJO类对象的事件。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class User implements HttpSessionBindingListener,Serializable&#123;</span><br><span class="line"></span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line">    </span><br><span class="line">    public String getUsername() &#123;</span><br><span class="line">        return username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUsername(String username) &#123;</span><br><span class="line">        this.username &#x3D; username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password &#x3D; password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void valueBound(HttpSessionBindingEvent hsbe) &#123;</span><br><span class="line">        System.out.println(&quot;valueBound name: &quot;+hsbe.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void valueUnbound(HttpSessionBindingEvent hsbe) &#123;</span><br><span class="line">        System.out.println(&quot;valueUnbound name: &quot;+hsbe.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Session数据的钝化与活化：</p><p>　　由于session中保存大量访问网站相关的重要信息，因此过多的session数据就会服务器性能的下降，占用过多的内存。因此类似数据库对象的持久化，web容器也会把不常使用的session数据持久化到本地文件或者数据中。这些都是有web容器自己完成，不需要用户设定。</p><p>　　不用的session数据序列化到本地文件中的过程，就是钝化；</p><p>　　当再次访问需要到该session的内容时，就会读取本地文件，再次放入内存中，这个过程就是活化。</p><p>　　类似的，只要实现HttpSeesionActivationListener接口就是实现钝化与活化事件的监听：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public class User implements HttpSessionBindingListener,</span><br><span class="line">HttpSessionActivationListener,Serializable&#123;</span><br><span class="line"></span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line">    </span><br><span class="line">    public String getUsername() &#123;</span><br><span class="line">        return username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUsername(String username) &#123;</span><br><span class="line">        this.username &#x3D; username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password &#x3D; password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void valueBound(HttpSessionBindingEvent hsbe) &#123;</span><br><span class="line">        System.out.println(&quot;valueBound name: &quot;+hsbe.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void valueUnbound(HttpSessionBindingEvent hsbe) &#123;</span><br><span class="line">        System.out.println(&quot;valueUnbound name: &quot;+hsbe.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void sessionDidActivate(HttpSessionEvent hsbe) &#123;</span><br><span class="line">        System.out.println(&quot;sessionDidActivate name: &quot;+hsbe.getSource());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void sessionWillPassivate(HttpSessionEvent hsbe) &#123;</span><br><span class="line">        System.out.println(&quot;sessionWillPassivate name: &quot;+hsbe.getSource());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;监听器&quot;&gt;&lt;a href=&quot;#监听器&quot; class=&quot;headerlink&quot; title=&quot;监听器&quot;&gt;&lt;/a&gt;监听器&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://images0.cnblogs.com/blog2015/449064/201503/30170</summary>
      
    
    
    
    <category term="jsp" scheme="http://example.com/categories/jsp/"/>
    
    
    <category term="jsp" scheme="http://example.com/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>12.过滤器.md</title>
    <link href="http://example.com/2020/12/17/JSP%E5%92%8CServlet/12.%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>http://example.com/2020/12/17/JSP%E5%92%8CServlet/12.%E8%BF%87%E6%BB%A4%E5%99%A8/</id>
    <published>2020-12-17T07:02:25.000Z</published>
    <updated>2020-12-17T08:01:01.724Z</updated>
    
    <content type="html"><![CDATA[<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>创建多滤器：建一个类，实现一个Filter接口</p><p>把一个类变成具有特殊功能的类一般有三种方法：</p><p>​    1.继承类</p><p>​    2.实现接口</p><p>​    3.添加注解</p><p>init()、destroy() 原理、执行时机 同Servlet</p><p><img src="E:\待办\Java-Butterfly-Transform\学习笔记\Servlet和JSP\assets\1590046002491.png" alt="1590046002491"></p><p>配置过滤器，类似servlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>filter.MyFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/MyServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">和servlet一样，通过<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>--&gt;找到<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>--&gt;然后通过<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>--&gt;找到<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>过滤器所在的地方。</span><br><span class="line">    过滤的东西由<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>决定。</span><br><span class="line">    只拦截 访问MyServlet的请求</span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/MyServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">拦截一切请求（每一次访问 都会被拦截）</span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p><strong>通过doFilter()处理拦截，并且通过chain.doFilter(request, response);放行</strong></p><p>dispatcher请求方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REQUEST：拦截HTTP请求 get post</span><br><span class="line">FORWARD：只拦截 通过 请求转发方式的请求</span><br><span class="line"></span><br><span class="line">INCLUDE:只拦截拦截通过 request.getRequestDispatcher(&quot;&quot;).include()  、通过&lt;jsp:include page&#x3D;&quot;...&quot; &#x2F;&gt;此种方式发出的请求</span><br><span class="line">ERROR：只拦截&lt;error-page&gt;发出的请求</span><br></pre></td></tr></table></figure><p>过滤器中doFilter方法参数：ServletRequest<br>在Servlet中的方法参数：HttpServletRequest</p><p>过滤器链(多个过滤器)<br>可以配置多个过滤器，过滤器的先后顺序 是由 <filter-mapping>的位置 决定</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;过滤器&quot;&gt;&lt;a href=&quot;#过滤器&quot; class=&quot;headerlink&quot; title=&quot;过滤器&quot;&gt;&lt;/a&gt;过滤器&lt;/h2&gt;&lt;p&gt;创建多滤器：建一个类，实现一个Filter接口&lt;/p&gt;
&lt;p&gt;把一个类变成具有特殊功能的类一般有三种方法：&lt;/p&gt;
&lt;p&gt;​    </summary>
      
    
    
    
    <category term="jsp" scheme="http://example.com/categories/jsp/"/>
    
    
    <category term="jsp" scheme="http://example.com/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>16.连接MySQL数据库url报错问题.md</title>
    <link href="http://example.com/2020/12/17/JSP%E5%92%8CServlet/16.%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93url%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2020/12/17/JSP%E5%92%8CServlet/16.%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93url%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/</id>
    <published>2020-12-17T07:02:25.000Z</published>
    <updated>2020-12-17T08:01:02.117Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title:<br>date:<br>updated:<br>type:<br>comments:<br>description:<br>keywords:<br>top <em>img:<br>mathjax:<br>katex:<br>aside:<br>aplayer:<br>highlight</em> shrink: </p><hr><p>1.在.properties文件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;lemon?useUnicode&#x3D;true&amp;useJDBCCompliantTimezoneShift&#x3D;true&amp;useLegacyDatetimeCode&#x3D;false&amp;serverTimezone&#x3D;UTC</span><br></pre></td></tr></table></figure><p>2.在.xml中：</p><p>&amp;要用变蓝的部分替换：具体参考博客：<a href="https://www.cnblogs.com/softidea/p/5765624.html">https://www.cnblogs.com/softidea/p/5765624.html</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url=&quot;jdbc:mysql://localhost:3306/lemon?useUnicode=true<span class="symbol">&amp;amp;</span>useJDBCCompliantTimezoneShift=true<span class="symbol">&amp;amp;</span>useLegacyDatetimeCode=false<span class="symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在mysql5中，jdbc连接mysql5是com.mysql.jdbc.Driver，而mysql6以及以上是com.mysql.cj.jdbc.Driver，并且在url之后要指定时区。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;title:&lt;br&gt;date:&lt;br&gt;updated:&lt;br&gt;type:&lt;br&gt;comments:&lt;br&gt;description:&lt;br&gt;keywords:&lt;br&gt;top &lt;em&gt;img:&lt;br&gt;mathjax:&lt;br&gt;katex:&lt;br&gt;aside:&lt;br&gt;ap</summary>
      
    
    
    
    <category term="jsp" scheme="http://example.com/categories/jsp/"/>
    
    
    <category term="jsp" scheme="http://example.com/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>2.IDEA创建JSP项目步骤.md</title>
    <link href="http://example.com/2020/12/17/JSP%E5%92%8CServlet/2.IDEA%E5%88%9B%E5%BB%BAJSP%E9%A1%B9%E7%9B%AE%E6%AD%A5%E9%AA%A4/"/>
    <id>http://example.com/2020/12/17/JSP%E5%92%8CServlet/2.IDEA%E5%88%9B%E5%BB%BAJSP%E9%A1%B9%E7%9B%AE%E6%AD%A5%E9%AA%A4/</id>
    <published>2020-12-17T07:02:25.000Z</published>
    <updated>2020-12-17T08:01:02.157Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IDEA创建JSP项目步骤"><a href="#IDEA创建JSP项目步骤" class="headerlink" title="IDEA创建JSP项目步骤"></a>IDEA创建JSP项目步骤</h2><p><strong>参考博客:<a href="https://blog.csdn.net/a145127/article/details/84893355">https://blog.csdn.net/a145127/article/details/84893355</a></strong></p><h3 id="1-创建"><a href="#1-创建" class="headerlink" title="1.创建"></a>1.创建</h3><h4 id="1-创建步骤"><a href="#1-创建步骤" class="headerlink" title="1.创建步骤"></a>1.创建步骤</h4><p>1.新建项目</p><p>2.在web-INF下新建classes、lib两个目录</p><p>classes：保持编译后的.class文件</p><p>lib：存放jar包的文件夹</p><p>3.设置classes、设置lib</p><p>4.设置Artifacts（系统自动设置，如果没有则自己创建）</p><p>5.设置Facets（系统自动设置，如果没有则自己创建）</p><p>6.引入tomcat</p><p>7.如果需要使用JDBC，需导入JDBC驱动</p><p>8.配置tomcat</p><h5 id="1-创建项目，选择Web-Application"><a href="#1-创建项目，选择Web-Application" class="headerlink" title="1.创建项目，选择Web Application"></a>1.创建项目，选择Web Application</h5><p><img src="C:\Users\dell\AppData\Roaming\Typora\typora-user-images\1588815108116.png" alt="1588815108116"></p><p>2.填写项目名称</p><p>3.点击Finnish，创建完成，项目结构如图：</p><p><img src="C:\Users\dell\AppData\Roaming\Typora\typora-user-images\1588815249526.png" alt="1588815249526"></p><h5 id="2-设置classes："><a href="#2-设置classes：" class="headerlink" title="2.设置classes："></a>2.设置classes：</h5><p>新建文件夹之后的目录：</p><p><img src="E:\待办\Java-Butterfly-Transform\学习笔记\Servlet和JSP\assets\1589364109723.png" alt="1589364109723"></p><p>设置编译输出目录为classes文件夹：</p><p><img src="E:\待办\Java-Butterfly-Transform\学习笔记\Servlet和JSP\assets\1589364218474.png" alt="1589364218474"></p><h5 id="3-设置lib"><a href="#3-设置lib" class="headerlink" title="3.设置lib:"></a>3.设置lib:</h5><p><img src="E:\待办\Java-Butterfly-Transform\学习笔记\Servlet和JSP\assets\1589364271760.png" alt="1589364271760"></p><p><img src="E:\待办\Java-Butterfly-Transform\学习笔记\Servlet和JSP\assets\1589364302116.png" alt="1589364302116"></p><p><img src="E:\待办\Java-Butterfly-Transform\学习笔记\Servlet和JSP\assets\1589364319205.png" alt="1589364319205"></p><p><img src="E:\待办\Java-Butterfly-Transform\学习笔记\Servlet和JSP\assets\1589364343848.png" alt="1589364343848"></p><h5 id="4-设置Artifacts（系统自动设置，如果没有则自己创建）"><a href="#4-设置Artifacts（系统自动设置，如果没有则自己创建）" class="headerlink" title="4.设置Artifacts（系统自动设置，如果没有则自己创建）"></a>4.设置Artifacts（系统自动设置，如果没有则自己创建）</h5><p><img src="C:\Users\dell\AppData\Roaming\Typora\typora-user-images\1588815885822.png" alt="1588815885822"></p><p><img src="C:\Users\dell\AppData\Roaming\Typora\typora-user-images\1588815893262.png" alt="1588815893262"></p><p>然后选上我们的Test项目：</p><p><img src="C:\Users\dell\AppData\Roaming\Typora\typora-user-images\1588815908901.png" alt="1588815908901"></p><h5 id="5-设置Facets（系统自动设置，如果没有则自己创建）"><a href="#5-设置Facets（系统自动设置，如果没有则自己创建）" class="headerlink" title="5.设置Facets（系统自动设置，如果没有则自己创建）"></a>5.设置Facets（系统自动设置，如果没有则自己创建）</h5><p><img src="C:\Users\dell\AppData\Roaming\Typora\typora-user-images\1588815922445.png" alt="1588815922445"></p><p>手动创建如下：</p><p><img src="C:\Users\dell\AppData\Roaming\Typora\typora-user-images\1588815936029.png" alt="1588815936029"></p><p>也是选择Test项目</p><p><img src="C:\Users\dell\AppData\Roaming\Typora\typora-user-images\1588815948926.png" alt="1588815948926"></p><p>然后点ok</p><h5 id="6-引入tomcat（如果不引入，在编写内置对象request、response等IDEA不会提示且会变红）"><a href="#6-引入tomcat（如果不引入，在编写内置对象request、response等IDEA不会提示且会变红）" class="headerlink" title="6.引入tomcat（如果不引入，在编写内置对象request、response等IDEA不会提示且会变红）"></a>6.引入tomcat（如果不引入，在编写内置对象request、response等IDEA不会提示且会变红）</h5><p><img src="E:\待办\Java-Butterfly-Transform\学习笔记\Servlet和JSP\assets\1589364844569.png" alt="1589364844569"></p><p><img src="E:\待办\Java-Butterfly-Transform\学习笔记\Servlet和JSP\assets\1589364861006.png" alt="1589364861006"></p><p><img src="E:\待办\Java-Butterfly-Transform\学习笔记\Servlet和JSP\assets\1589364895045.png" alt="1589364895045"></p><h5 id="7-如果需要使用JDBC，需导入JDBC驱动"><a href="#7-如果需要使用JDBC，需导入JDBC驱动" class="headerlink" title="7.如果需要使用JDBC，需导入JDBC驱动"></a>7.如果需要使用JDBC，需导入JDBC驱动</h5><p>把数据库驱动复制到lib文件中</p><p><img src="E:\待办\Java-Butterfly-Transform\学习笔记\Servlet和JSP\assets\1589427426934.png" alt="1589427426934"></p><h5 id="8-配置Tomcat-服务器"><a href="#8-配置Tomcat-服务器" class="headerlink" title="8.配置Tomcat 服务器"></a>8.配置Tomcat 服务器</h5><p><img src="C:\Users\dell\AppData\Roaming\Typora\typora-user-images\1588815961420.png" alt="1588815961420"></p><p>如下</p><p><img src="C:\Users\dell\AppData\Roaming\Typora\typora-user-images\1588815975902.png" alt="1588815975902"></p><p>添加后如下：</p><p><img src="C:\Users\dell\AppData\Roaming\Typora\typora-user-images\1588815992847.png" alt="1588815992847"></p><p>基本设置如下</p><p><img src="E:\待办\Java-Butterfly-Transform\学习笔记\Servlet和JSP\assets\1589365217897.png" alt="1589365217897"></p><p>创建：</p><p><img src="C:\Users\dell\AppData\Roaming\Typora\typora-user-images\1588816025958.png" alt="1588816025958"></p><p><img src="E:\待办\Java-Butterfly-Transform\学习笔记\Servlet和JSP\assets\1589365188141.png" alt="1589365188141"></p><p>说明：此处的/test 是项目在 服务器的 路径即：<code>localhost:8080/</code>就是我们服务器主页的路径，默认访问index.jsp。</p><p>然后点ok</p><p>会自动创建如下</p><p><img src="C:\Users\dell\AppData\Roaming\Typora\typora-user-images\1588816058525.png" alt="1588816058525"></p><p>然后启动tomcat，访问index.jsp</p><p><img src="E:\待办\Java-Butterfly-Transform\学习笔记\Servlet和JSP\assets\1588816509860.png" alt="1588816509860"></p><p>浏览器显示</p><p><img src="E:\待办\Java-Butterfly-Transform\学习笔记\Servlet和JSP\assets\1588816555974.png" alt="1588816555974"></p><p>项目创建完成！</p><h3 id="2-问题"><a href="#2-问题" class="headerlink" title="2.问题"></a>2.问题</h3><p>1.引入jstl标签变红：</p><p>​    原因：缺少了两个架包，jstl.jar和 standard.jar。</p><p>​    解决办法：</p><p>​    第一种：1.在tomcat\webapps\examples\WEB-INF\lib目录下找到那两个架包：</p><p><img src="E:\待办\Java-Butterfly-Transform\学习笔记\Servlet和JSP\assets\1589446920690.png" alt="1589446920690"></p><p>​            2.把这两个包复制粘贴到tomcat\lib目录下，重新打开IDEA或者刷新项目。</p><p>​    第二种：把tomcat\webapps\examples\WEB-INF\lib目录下的两个架包直接复制到项目的WebContent目录下的WEB-INF下的lib里面：</p><p>​    <img src="E:\待办\Java-Butterfly-Transform\学习笔记\Servlet和JSP\assets\1589446989569.png" alt="1589446989569"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;IDEA创建JSP项目步骤&quot;&gt;&lt;a href=&quot;#IDEA创建JSP项目步骤&quot; class=&quot;headerlink&quot; title=&quot;IDEA创建JSP项目步骤&quot;&gt;&lt;/a&gt;IDEA创建JSP项目步骤&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;参考博客:&lt;a href=&quot;http</summary>
      
    
    
    
    <category term="jsp" scheme="http://example.com/categories/jsp/"/>
    
    
    <category term="jsp" scheme="http://example.com/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>3.JSP页面元素和九大隐式对象.md</title>
    <link href="http://example.com/2020/12/17/JSP%E5%92%8CServlet/3.JSP%E9%A1%B5%E9%9D%A2%E5%85%83%E7%B4%A0%E5%92%8C%E4%B9%9D%E5%A4%A7%E9%9A%90%E5%BC%8F%E5%AF%B9%E8%B1%A1/"/>
    <id>http://example.com/2020/12/17/JSP%E5%92%8CServlet/3.JSP%E9%A1%B5%E9%9D%A2%E5%85%83%E7%B4%A0%E5%92%8C%E4%B9%9D%E5%A4%A7%E9%9A%90%E5%BC%8F%E5%AF%B9%E8%B1%A1/</id>
    <published>2020-12-17T07:02:25.000Z</published>
    <updated>2020-12-17T08:01:01.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JSP页面元素和九大隐式对象"><a href="#JSP页面元素和九大隐式对象" class="headerlink" title="JSP页面元素和九大隐式对象"></a>JSP页面元素和九大隐式对象</h2><h3 id="1-jsp页面元素"><a href="#1-jsp页面元素" class="headerlink" title="1.jsp页面元素"></a>1.jsp页面元素</h3><p>1.脚本程序：&lt;%    局部变量、Java语句    %&gt;</p><p>2.JSP声明：&lt;%!          全局变量、方法定义                    %&gt;</p><p>3.JSP表达式：&lt;%= 输出表达式    %&gt;    </p><p>4.指令</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page ... %&gt;   定义页面的依赖属性，比如脚本语言、error页面、缓存需求等等</span><br><span class="line">    language:jsp页面使用的脚本语言</span><br><span class="line">    <span class="keyword">import</span>:导入类</span><br><span class="line">    pageEncoding:jsp文件自身编码  jsp -&gt;java</span><br><span class="line">    contentType:浏览器解析jsp的编码</span><br><span class="line">    &lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>  <span class="keyword">import</span>=<span class="string">&quot;java.util.Date&quot;</span> %&gt;</span><br><span class="line">    </span><br><span class="line">&lt;%@ include ... %&gt;      包含其他文件</span><br><span class="line"></span><br><span class="line">&lt;%@ taglib ... %&gt;       引入标签库的定义，可以是自定义标签</span><br></pre></td></tr></table></figure><p>5.注释</p><p>​    html注释<!-- -->  ,可以被客户 通过浏览器查看源码 所观察到<br>​    java注释//     /<em>…</em>/<br>​    jsp注释&lt;%– –%&gt;</p><h3 id="2-小知识点"><a href="#2-小知识点" class="headerlink" title="2.小知识点"></a>2.小知识点</h3><p>1.out.println不能回车，需要＋</br>，out.print() 、&lt;%= %&gt;可以直接解析html代码。</p><p>2.修改web.xml、配置文件、Java  需要重启tomcat服务</p><p>​    修改jsp、html、css、js，不需要重启</p><p>3.并不是 任何的内部跳转都能访问WEB-INF；原因是 跳转有2种方式：请求转发 、重定向</p><p>4.如果在jsp中写request等对象的方法时，没有提示且变红，需要在project Structure–modules–dependencies–+号–libraries–添加tomcat。</p><p>5.get提交方式:  method=”get” 和 地址栏 、超链接(<a href="xx">)请求方式 默认都属于get提交方式</p><p>6.get与post请求方式的区别：<br>    a.   get方式 在地址栏显示 请求信息  (但是地址栏能够容纳的 信息有限，4-5KB；如果请求数据存在大文件，图片等  会出现地址栏无法容纳全部的数据而出错) ；post不会显示<br>    b.   文件上传操作，必须是post<br>推荐使用post</p><p>7.统一请求的编码 request<br>get方式请求 如果出现乱码，解决：<br>    a.统一每一个变量的 编码 （不推荐）<br>        new String(  旧编码，新编码);<br>        name = new String(name.getBytes(“iso-8859-1”),”utf-8”);</p><p>​    b. 修改server.xml ，一次性的 更改tomcat默认get提交方式的编码 （utf-8）<br>​    建议 使用tomcat时， 首先在server.xml中 统一get方式的编码.. URIEncoding=”UTF-8”</p><p>post方式请求：<br>    request.setCharacterEncoding(“utf-8”) ;</p><h3 id="3-jsp九大内置对象"><a href="#3-jsp九大内置对象" class="headerlink" title="3.jsp九大内置对象"></a>3.jsp九大内置对象</h3><p>1.out：输出对象，向客户端输出内容。<br>2.request：请求对象；存储“客户端向服务端发送的请求信息”。<br>request对象的常见方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">getParameter</span><span class="params">(String name)</span> :根据请求的字段名key （input标签的name属性值） ，返回字段值value （input标签的value属性值）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">String[] <span class="title">getParameterValues</span><span class="params">(String name)</span>: 根据请求的字段名key ，返回多个字段值value  （checkbox）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setCharacterEncoding</span><span class="params">(<span class="string">&quot;编码格式utf-8&quot;</span>)</span> ：设置post方式的请求编码  （tomcat7以前默认iso-8859-1，tomcat8以后改为了utf-8）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">getRequestDispatcher</span><span class="params">(<span class="string">&quot;b.jsp&quot;</span>)</span>.<span class="title">forward</span><span class="params">(request,response)</span> </span>;  ：请求转发 的方式跳转页面   A - &gt; B</span><br><span class="line"></span><br><span class="line"><span class="function">ServletContext <span class="title">getServerContext</span><span class="params">()</span>:获取项目的ServletContext对象</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><p>示例：注册、显示</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;show.jsp&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">        用户名：&lt;input type=&quot;text&quot; name=&quot;uname&quot;&gt;&lt;/br&gt;</span><br><span class="line">        密码：&lt;input type=&quot;password&quot; name=&quot;upassword&quot;&gt;&lt;/br&gt;</span><br><span class="line">        年龄：&lt;input type=&quot;text&quot; name=&quot;uage&quot;&gt;&lt;/br&gt;</span><br><span class="line">        爱好：&lt;/br&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;uhobbies&quot;</span> value=<span class="string">&quot;篮球&quot;</span>&gt;篮球</span><br><span class="line">            &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;uhobbies&quot;</span> value=<span class="string">&quot;足球&quot;</span>&gt;足球</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; name=&quot;uhobbies&quot; value=&quot;台球&quot;&gt;台球&lt;/br&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;注册&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        String uname = request.getParameter(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line">        String upassword = request.getParameter(<span class="string">&quot;upassword&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> uage = Integer.parseInt(request.getParameter(<span class="string">&quot;uage&quot;</span>));</span><br><span class="line">        String[] uhobbies = request.getParameterValues(<span class="string">&quot;uhobbies&quot;</span>);</span><br><span class="line">    %&gt;</span><br><span class="line">    注册成功！&lt;/br&gt;</span><br><span class="line">    信息显示：&lt;/br&gt;</span><br><span class="line">    姓名：&lt;%=uname %&gt;&lt;/br&gt;</span><br><span class="line">    密码：&lt;%=upassword %&gt;&lt;/br&gt;</span><br><span class="line">    年龄：&lt;%=uage %&gt;&lt;/br&gt;</span><br><span class="line">    爱好：&lt;/br&gt;&lt;%</span><br><span class="line">        <span class="keyword">if</span> (uhobbies != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(String uhobbie : uhobbies)&#123;</span><br><span class="line">                out.print(uhobbie+<span class="string">&quot;&amp;nbsp&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>3.response：响应对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">提供的方法：</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addCookie</span><span class="params">( Cookie cookie )</span></span>; 服务端向客户端增加cookie对象</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendRedirect</span><span class="params">(String location )</span> <span class="keyword">throws</span> IOException</span>; :页面跳转的一种方式（重定向）</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContetType</span><span class="params">(String type)</span>:设置服务端响应的编码（设置服务端的contentType类型）</span></span><br></pre></td></tr></table></figure><p>示例：登陆</p><p>login.jsp  -&gt; check.jsp  -&gt;success.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;check.jsp&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        用户登录：&lt;/br&gt;</span><br><span class="line">        用户名：&lt;input type=&quot;text&quot; name=&quot;uname&quot;&gt;&lt;/br&gt;</span><br><span class="line">        密码：&lt;input type=&quot;password&quot; name=&quot;upassword&quot;&gt;&lt;/br&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登录&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        String uname = request.getParameter(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line">        String upassword = request.getParameter(<span class="string">&quot;upassword&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (uname.equals(<span class="string">&quot;zs&quot;</span>)  &amp;&amp; upassword.equals(<span class="string">&quot;123&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//response.sendRedirect(&quot;success.jsp&quot;);</span></span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;success.jsp&quot;</span>).forward(request, response);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            out.print(<span class="string">&quot;用户名或密码有误！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">登录成功！&lt;/br&gt;</span><br><span class="line">    欢迎：</span><br><span class="line">    &lt;%</span><br><span class="line">        String uname = request.getParameter(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line">        out.print(uname);</span><br><span class="line">    %&gt;</span><br></pre></td></tr></table></figure><pre><code>                   请求转发                  重定向</code></pre><p>地址栏是否改变        不变(check.jsp)        改变(success.jsp)</p><p>是否保留第一次           保留                           不保留        –4种范围对象<br>请求时的数据</p><p>请求的次数                      1                                  2</p><p>跳转发生的位置          服务端             客户端发出的第二次跳转</p><p>转发和重定向的跳转图：</p><p><img src="E:\待办\Java-Butterfly-Transform\学习笔记\Servlet和JSP\assets\1588901345688.png" alt="1588901345688">4</p><p>4.session(服务端)<br>Cookie（客户端，不是内置对象）:Cookie是由 服务端生成的 ，再发送给客户端保存。<br>相当于 本地缓存的作用： 客户端(hello.mp4,zs/abc)-&gt;服务端(hello.mp4；zs/abc)<br>作用：提高访问服务端的效率，但是安全性较差。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Cookie：name=value   </span><br><span class="line">javax.servlet.http.Cookie</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Cookie</span><span class="params">(String name,String value)</span></span></span><br><span class="line"><span class="function">String <span class="title">getName</span><span class="params">()</span>：获取name</span></span><br><span class="line"><span class="function">String <span class="title">getValue</span><span class="params">()</span>:获取value</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setMaxAge</span><span class="params">(<span class="keyword">int</span> expiry)</span></span>;最大有效期 （秒）</span><br><span class="line"></span><br><span class="line">服务端准备Cookie：</span><br><span class="line">response.addCookie(Cookie cookie)</span><br><span class="line">页面跳转（转发，重定向）</span><br><span class="line">客户端获取cookie:  </span><br><span class="line">request.getCookies();</span><br></pre></td></tr></table></figure><p>a.服务端增加cookie :response对象；客户端获取对象：request对象<br>b.不能直接获取某一个单独对象，只能一次性将 全部的cookie拿到</p><p>通过F12可以发现  除了自己设置的Cookie对象外，还有一个name为 JSESSIONID的cookie</p><p>建议 cookie只保存  英文数字，否则需要进行编码、解码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">实践：使用Cookie实现  记住用户名  功能</span><br></pre></td></tr></table></figure><p>session机制：</p><p>客户端第一次请求服务端时，（jsessionid-sessionid）服务端会产生一个session对象（用于保存该客户的信息）；<br>并且每个session对象 都会有一个唯一的 sessionId( 用于区分其他session);<br>服务端由会 产生一个cookie，并且 该cookie的name=JSESSIONID ,value=服务端sessionId的值；<br>然后 服务端会在 响应客户端的同时 将该cookie发送给客户端，至此 客户端就有了 一个cookie(JSESSIONID)；<br>因此，客户端的cookie就可以和服务端的session一一对应（JSESSIONID - sessionID）</p><p>客户端第二/n次请求服务端时:服务端会先用客户端cookie种的JSESSIONID  去服务端的session中匹配sessionid,如果匹配成功（cookie  jsessionid和sesion sessionid），说明此用户 不是第一次访问,无需登录；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">session方法：</span><br><span class="line"><span class="function">String <span class="title">getId</span><span class="params">()</span> :获取sessionId  </span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isNew</span><span class="params">()</span> :判断是否是 新用户（第一次访问）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">invalidate</span><span class="params">()</span>:使session失效  （退出登录、注销）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Object <span class="title">getAttribute</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setMaxInactiveInterval</span><span class="params">(秒)</span> ：设置最大有效 非活动时间 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMaxInactiveInterval</span><span class="params">()</span>:获取最大有效 非活动时间 </span></span><br></pre></td></tr></table></figure><p>示例：<br>登录</p><p>客户端在第一次请求服务端时，如果服务端发现 此请求没有 JSESSIONID,则会创建一个 name=JSESIONID的cookie  并返回给客户端</p><p>Cookie：<br>a.不是内对对象，要使用必须new<br>b.但是，服务端会 自动生成一个(服务端自动new一个cookie) name=JSESIONID的cookie  并返回给客户端</p><p>cookie和session的区别：<br>        session        cookie<br>保存的位置    服务端        客户端<br>安全性        较安全        较不安全<br>保存的内容    Object        String    </p><p>5.appliation 全局对象<br>String getContextPath()    虚拟路径<br>String getRealPath(String name): 绝对路径（虚拟路径 相对的绝对路径）</p><p>6.pageContext   JSP页面容器</p><p>7.config   配置对象（服务器配置信息）</p><p>8.page  当前JSP页面对象</p><p>9.exception   异常对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">以上4个对象共有的方法：</span><br><span class="line">Object getAttribute(String name):根据属性名，或者属性值</span><br><span class="line">void setAttribute(String name,Object obj) :设置属性值（新增，修改）</span><br><span class="line">setAttribute(&quot;a&quot;,&quot;b&quot;) ;&#x2F;&#x2F;如果a对象之前不存在，则新建一个a对象 ；</span><br><span class="line"> 如果a之前已经存在，则将a的值改为b</span><br><span class="line">void removeAttribute(String name)：根据属性名，删除对象</span><br></pre></td></tr></table></figure><p>a.<br>pageContext 当前页面有效 (页面跳转后无效)</p><p>b.<br>request   同一次请求有效；其他请求无效 （请求转发后有效；重定向后无效）</p><p>c.<br>session  同一次会话有效  （无论怎么跳转，都有效；关闭/切换浏览器后无效 ； 从 登陆-&gt;退出 之间 全部有效）</p><p>d.<br>application<br>    全局变量；整个项目运行期间 都有效 (切换浏览器 仍然有效)；关闭服务、其他项目 无效</p><p>-&gt;多个项目共享、重启后仍然有效 ：JNDI</p><p>1.以上的4个范围对象，通过 setAttribute()复制，通过getAttribute()取值；<br>2.以上范围对象，尽量使用最小的范围。因为 对象的范围越大，造成的性能损耗越大。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JSP页面元素和九大隐式对象&quot;&gt;&lt;a href=&quot;#JSP页面元素和九大隐式对象&quot; class=&quot;headerlink&quot; title=&quot;JSP页面元素和九大隐式对象&quot;&gt;&lt;/a&gt;JSP页面元素和九大隐式对象&lt;/h2&gt;&lt;h3 id=&quot;1-jsp页面元素&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="jsp" scheme="http://example.com/categories/jsp/"/>
    
    
    <category term="jsp" scheme="http://example.com/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>4.JDBC.md</title>
    <link href="http://example.com/2020/12/17/JSP%E5%92%8CServlet/4.JDBC/"/>
    <id>http://example.com/2020/12/17/JSP%E5%92%8CServlet/4.JDBC/</id>
    <published>2020-12-17T07:02:25.000Z</published>
    <updated>2020-12-17T08:01:02.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><h3 id="1-JDBC的功能图和过程图"><a href="#1-JDBC的功能图和过程图" class="headerlink" title="1.JDBC的功能图和过程图"></a>1.JDBC的功能图和过程图</h3><p>JDBC的API：</p><p><img src="E:\待办\Java-Butterfly-Transform\学习笔记\Servlet和JSP\assets\1588990948236.png" alt="1588990948236"></p><p>JDBC架构图：</p><p><img src="E:\待办\Java-Butterfly-Transform\学习笔记\Servlet和JSP\assets\1588990988323.png" alt="1588990988323"></p><h3 id="2-JDBC介绍以及使用过程"><a href="#2-JDBC介绍以及使用过程" class="headerlink" title="2.JDBC介绍以及使用过程"></a>2.JDBC介绍以及使用过程</h3><p>1.JDBC:Java DataBase Connectivity  可以为多种关系型数据库DBMS 提供统一的访问方式，用Java来操作数据库<br>2.JDBC API 主要功能：<br>三件事，具体是通过以下类/接口实现：</p><ol><li><p>DriverManager ： 管理jdbc驱动</p></li><li><p>Connection： 连接（通过DriverManager产生）</p></li><li><p>Statement（） ：增删改查  （通过Connection产生 ）</p><p>PreparedStatement():增删改查  （通过Connection产生 ）</p><p>CallableStatement  ： 调用数据库中的 存储过程/存储函数  （通过Connection产生 ）</p></li><li><p>Result ：返回的结果集  （上面的Statement等产生 ）</p></li></ol><p>Connection产生操作数据库的对象：</p><p>Connection产生Statement对象：createStatement()<br>Connection产生PreparedStatement对象：prepareStatement()<br>Connection产生CallableStatement对象：prepareCall();</p><p>Statement操作数据库：<br>增删改：executeUpdate()<br>查询：executeQuery();</p><p>ResultSet：保存结果集 select * from xxx<br>next():光标下移，判断是否有下一条数据；true/false<br>previous():  true/false<br>getXxx(字段名|位置):获取具体的字段值 </p><p>PreparedStatement操作数据库：<br>public interface PreparedStatement extends Statement </p><p>增删改：executeUpdate()<br>查询：executeQuery();<br>–此外<br>赋值操作 setXxx();</p><h3 id="3-PreparedStatement与Statement在使用时的区别："><a href="#3-PreparedStatement与Statement在使用时的区别：" class="headerlink" title="3.PreparedStatement与Statement在使用时的区别："></a>3.PreparedStatement与Statement在使用时的区别：</h3><p>1.Statement:<br>sql<br>executeUpdate(sql)</p><p>2.PreparedStatement:<br>sql(可能存在占位符?)<br>在创建PreparedStatement 对象时，将sql预编译 prepareStatement(sql)<br>executeUpdate()<br>setXxx()替换占位符？</p><p>推荐使用PreparedStatement：原因如下：<br>1.编码更加简便（避免了字符串的拼接）<br>String name = “zs” ;<br>int age = 23 ;</p><p>stmt:<br>String sql =” insert into student(stuno,stuname) values(‘“+name+”‘,  “+age+” )    “ ;<br>stmt.executeUpdate(sql);</p><p>pstmt:<br>String sql =” insert into student(stuno,stuname) values(?,?) “ ;<br>pstmt = connection.prepareStatement(sql);//预编译SQL<br>pstmt.setString(1,name);<br>pstmt.setInt(2,age);</p><p>executeUpdate()</p><p>2.提高性能(因为 有预编译操作，预编译只需要执行一次)<br>需要重复增加100条数<br>stmt:<br>String sql =” insert into student(stuno,stuname) values(‘“+name+”‘,  “+age+” )    “ ;<br>for(100)<br>stmt.executeUpdate(sql);</p><p>pstmt:<br>String sql =” insert into student(stuno,stuname) values(?,?) “ ;<br>pstmt = connection.prepareStatement(sql);//预编译SQL<br>pstmt.setString(1,name);<br>pstmt.setInt(2,age);<br>for( 100){<br>pstmt.executeUpdate();<br>}</p><p>3.安全（可以有效防止sql注入）<br>sql注入： 将客户输入的内容  和 开发人员的SQL语句 混为一体</p><p>stmt:存在被sql注入的风险<br>(例如输入  用户名：任意值 ‘ or 1=1 –<br>       密码：任意值)<br>分析：<br>select count(<em>) from login where uname=’任意值 ‘ or 1=1 –’ and upwd =’任意值’  ;<br>select count(</em>) from login where uname=’任意值 ‘ or 1=1 ;<br>select count(*) from login ;</p><p>select count(*) from login where uname=’”+name+”‘ and upwd =’”+pwd+”‘ </p><p>pstmt:有效防止sql注入</p><p>推荐使用pstmt</p><h3 id="4-jdbc访问数据库的具体步骤："><a href="#4-jdbc访问数据库的具体步骤：" class="headerlink" title="4.jdbc访问数据库的具体步骤："></a>4.jdbc访问数据库的具体步骤：</h3><p>a.导入驱动，加载具体的驱动类<br>b.与数据库建立连接<br>c.发送sql，执行<br>d.处理结果集 （查询）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">&quot;jdbc:mysql://localhost:3306/lemon?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String password = <span class="string">&quot;107462&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//导入驱动 加载驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="comment">//建立连接对象</span></span><br><span class="line">            connection = DriverManager.getConnection(URL,username, password);</span><br><span class="line">            <span class="comment">//创建SQL  执行</span></span><br><span class="line">            stmt = connection.createStatement();</span><br><span class="line">            String sql = <span class="string">&quot;insert into user VALUES (&#x27;lisi&#x27;,&#x27;123&#x27;);&quot;</span>;</span><br><span class="line">            <span class="comment">//执行SQL</span></span><br><span class="line">            <span class="keyword">int</span> count = stmt.executeUpdate(sql);  <span class="comment">// 返回值表示 增删改 几条数据</span></span><br><span class="line">            <span class="comment">// 处理结果</span></span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;操作成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        stmt.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (connection != <span class="keyword">null</span>)</span><br><span class="line">                        connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//导入驱动 加载驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="comment">//建立连接对象</span></span><br><span class="line">            connection = DriverManager.getConnection(URL,username, password);</span><br><span class="line">            <span class="comment">//创建SQL  执行</span></span><br><span class="line">            String sql = <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">            pstmt = connection.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//执行SQL</span></span><br><span class="line">            rs = pstmt.executeQuery();  <span class="comment">// 返回值表示 增删改 几条数据</span></span><br><span class="line">            <span class="comment">// 处理结果</span></span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                String upwd = rs.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">                String uname = rs.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">                System.out.println(uname+<span class="string">&quot; &quot;</span> + upwd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(rs!=<span class="keyword">null</span>)</span><br><span class="line">                    rs.close();</span><br><span class="line">                <span class="keyword">if</span> (pstmt != <span class="keyword">null</span>)</span><br><span class="line">                    pstmt.close();</span><br><span class="line">                <span class="keyword">if</span> (connection != <span class="keyword">null</span>)</span><br><span class="line">                    connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//update();</span></span><br><span class="line">        query();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCLogin</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">&quot;jdbc:mysql://localhost:3306/lemon?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String password = <span class="string">&quot;107462&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//导入驱动 加载驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="comment">//建立连接对象</span></span><br><span class="line">            connection = DriverManager.getConnection(URL,username, password);</span><br><span class="line">            <span class="comment">//创建SQL  执行</span></span><br><span class="line"></span><br><span class="line">            Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入用户名：&quot;</span>);</span><br><span class="line">            String name = input.nextLine() ;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">            String pwd = input.nextLine() ;</span><br><span class="line"></span><br><span class="line">            String sql = <span class="string">&quot;select count(*) from userss where username= ? and password = ? &quot;</span>;</span><br><span class="line">            pstmt = connection.prepareStatement(sql);</span><br><span class="line">            pstmt.setString(<span class="number">1</span>,name);</span><br><span class="line">            pstmt.setString(<span class="number">2</span>,pwd);</span><br><span class="line">            <span class="comment">//执行SQL</span></span><br><span class="line">            rs = pstmt.executeQuery();  <span class="comment">// 返回值表示 增删改 几条数据</span></span><br><span class="line">            <span class="comment">// 处理结果</span></span><br><span class="line">           <span class="keyword">int</span> count = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                count = rs.getInt(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;登录成功！&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;登录失败！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(rs!=<span class="keyword">null</span>)</span><br><span class="line">                    rs.close();</span><br><span class="line">                <span class="keyword">if</span> (pstmt != <span class="keyword">null</span>)</span><br><span class="line">                    pstmt.close();</span><br><span class="line">                <span class="keyword">if</span> (connection != <span class="keyword">null</span>)</span><br><span class="line">                    connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//update();</span></span><br><span class="line">        query();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-不同数据库的连接方式："><a href="#5-不同数据库的连接方式：" class="headerlink" title="5.不同数据库的连接方式："></a>5.不同数据库的连接方式：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">数据库驱动 ：Oracle</span><br><span class="line">驱动jar:  ojdbc-x.jar</span><br><span class="line">具体驱动类：oracle.jdbc.OracleDriver</span><br><span class="line">连接字符串：jdbc:oracle:thin:<span class="meta">@localhost</span>:<span class="number">1521</span>:ORCL</span><br><span class="line"></span><br><span class="line">数据库驱动 ：MySQL</span><br><span class="line">驱动jar:  mysql-connector-java-x.jar</span><br><span class="line">具体驱动类：com.mysql.cj.jdbc.Driver</span><br><span class="line">连接字符串：jdbc:mysql:<span class="comment">//localhost:3306/数据库实例名</span></span><br><span class="line"></span><br><span class="line">数据库驱动 ：SqlServer</span><br><span class="line">驱动jar:  sqljdbc-x.jar</span><br><span class="line">具体驱动类：com.microsoft.sqlserver.jdbc.SQLServerDriver</span><br><span class="line">连接字符串：jdbc:microsoft:sqlserver:localhost:<span class="number">1433</span>;databasename=数据库实例名</span><br><span class="line"></span><br><span class="line">使用jdbc操作数据库时，如果对数据库进行了更换，只需要替换：驱动、具体驱动类、连接字符串、用户名、密码</span><br></pre></td></tr></table></figure><h3 id="6-JSP访问数据库"><a href="#6-JSP访问数据库" class="headerlink" title="6.JSP访问数据库"></a>6.JSP访问数据库</h3><p>JSP就是在html中嵌套的java代码，因此 java代码可以写在jsp中（&lt;%  … %&gt;）</p><p>导包操作：java项目 ：1 Jar复制到工程中 2.右键该Jar :build path -&gt;add to build Path<br>          Web项目：jar复制到WEB-INF/lib</p><p>核心：就是将 java中的JDBC代码，复制到 JSP中的&lt;% … %&gt;</p><p>注意：如果jsp出现错误：The import Xxx cannot be resolved</p><p>尝试解决步骤：<br>    a.(可能是Jdk、tomcat版本问题) 右键项目-&gt;build path，将其中 报错的 libary或Lib 删除后 重新导入<br>    b.清空各种缓存：右键项目-&gt;Clean tomcat… clean  （Project -clean或者 进tomcat目录 删除里面work的子目录）<br>    c.删除之前的tomcat，重新解压缩、配置tomcat，重启计算机<br>    d.如果类之前没有包，则将该类加入包中</p><p>Demo：登录</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: dell</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">5</span>/<span class="number">9</span></span><br><span class="line">  Time: <span class="number">17</span>:<span class="number">10</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;check2.jsp&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;uname&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;upwd&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;登录&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;util.JDBCDao&quot;</span> %&gt;&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: dell</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">5</span>/<span class="number">13</span></span><br><span class="line">  Time: <span class="number">11</span>:<span class="number">20</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        String uname = request.getParameter(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line">        String upwd = request.getParameter(<span class="string">&quot;upwd&quot;</span>);</span><br><span class="line">        JDBCDao jdbcDao = <span class="keyword">new</span> JDBCDao();</span><br><span class="line">        <span class="keyword">int</span> result = jdbcDao.login(uname, upwd);</span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            out.println(<span class="string">&quot;登录成功！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (result == <span class="number">0</span>)&#123;</span><br><span class="line">            out.println(<span class="string">&quot;用户名和密码有误！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            out.println(<span class="string">&quot;系统异常！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoup</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/13 10:41</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@describe</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">&quot;jdbc:mysql://localhost:3306/lemon?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USERNAME = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PWD = <span class="string">&quot;107462&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DRIVER = <span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">login</span><span class="params">(String uname, String upwd)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// a.导入驱动，加载具体的驱动类</span></span><br><span class="line">            Class.forName(DRIVER);<span class="comment">// 加载具体的驱动类</span></span><br><span class="line">            <span class="comment">// b.与数据库建立连接</span></span><br><span class="line">            connection = DriverManager.getConnection(URL, USERNAME, PWD);</span><br><span class="line">            <span class="comment">// c.发送sql，执行(增删改、【查】)</span></span><br><span class="line"></span><br><span class="line">            String sql = <span class="string">&quot;select count(*) from userss where username= ? and password =?&quot;</span>;</span><br><span class="line">            pstmt = connection.prepareStatement(sql);</span><br><span class="line">            pstmt.setString(<span class="number">1</span>, uname);</span><br><span class="line">            pstmt.setString(<span class="number">2</span>, upwd);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行SQL(增删改executeUpdate()，查询executeQuery())</span></span><br><span class="line">            rs = pstmt.executeQuery(); <span class="comment">// 返回值表示 增删改 几条数据</span></span><br><span class="line">            <span class="comment">// d.处理结果</span></span><br><span class="line">            <span class="keyword">int</span> count = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                count = rs.getInt(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (rs != <span class="keyword">null</span>) rs.close();</span><br><span class="line">                <span class="keyword">if</span> (pstmt != <span class="keyword">null</span>) pstmt.close();<span class="comment">// 对象.方法</span></span><br><span class="line">                <span class="keyword">if</span> (connection != <span class="keyword">null</span>) connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JDBC&quot;&gt;&lt;a href=&quot;#JDBC&quot; class=&quot;headerlink&quot; title=&quot;JDBC&quot;&gt;&lt;/a&gt;JDBC&lt;/h2&gt;&lt;h3 id=&quot;1-JDBC的功能图和过程图&quot;&gt;&lt;a href=&quot;#1-JDBC的功能图和过程图&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="jsp" scheme="http://example.com/categories/jsp/"/>
    
    
    <category term="jsp" scheme="http://example.com/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>5.Javabean.md</title>
    <link href="http://example.com/2020/12/17/JSP%E5%92%8CServlet/5.Javabean/"/>
    <id>http://example.com/2020/12/17/JSP%E5%92%8CServlet/5.Javabean/</id>
    <published>2020-12-17T07:02:25.000Z</published>
    <updated>2020-12-17T08:01:01.764Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Javabean"><a href="#Javabean" class="headerlink" title="Javabean"></a>Javabean</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h3><p>将 jsp中 登录操作的代码  转移到了LoginDao.java；其中LoginDao类 就称之为JavaBean。</p><p>JavaBean的作用：</p><p>​    a.减轻的jsp复杂度  </p><p>​    b.提高代码复用（以后任何地方的 登录操作，都可以通过调用LoginDao实现）</p><p>JavaBean（就是一个Java类）的定义：满足一下2点 ，就可以称为JavaBean<br>    a.public 修饰的类  ,public 无参构造<br>    b.所有属性(如果有) 都是private，并且提供set/get   (如果boolean 则get 可以替换成is)</p><p>使用层面，Java分为2大类：<br>    a.封装业务逻辑的JavaBean (LoginDao.java封装了登录逻辑)            逻辑<br>        可以将jsp中的JDBC代码，封装到Login.java类中 （Login.java）</p><p>​    b.封装数据的JavaBean   （实体类，Student.java  Person.java  ）        数据<br>​        对应于数据库中的一张表<br>​        Login login = new Login(uname,upwd) ;//即用Login对象 封装了2个数据（用户名 和密码）</p><p>封装数据的JavaBean 对应于数据库中的一张表   (Login(name,pwd))<br>封装业务逻辑的JavaBean 用于操作 一个封装数据的JavaBean  </p><p>可以发现，JavaBean可以简化 代码(jsp-&gt;jsp+java)、提供代码复用(LoginDao.java)</p><h3 id="2-Demo"><a href="#2-Demo" class="headerlink" title="2.Demo"></a>2.Demo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javabean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoup</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/13 11:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@describe</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Login</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Login</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: dell</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">5</span>/<span class="number">9</span></span><br><span class="line">  Time: <span class="number">17</span>:<span class="number">10</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;check2.jsp&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;uname&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;upwd&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;登录&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;dao.JDBCDao&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javabean.Login&quot;</span> %&gt;&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: dell</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">5</span>/<span class="number">13</span></span><br><span class="line">  Time: <span class="number">11</span>:<span class="number">20</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        String uname = request.getParameter(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line">        String upwd = request.getParameter(<span class="string">&quot;upwd&quot;</span>);</span><br><span class="line">        Login login  = <span class="keyword">new</span> Login(uname, upwd);</span><br><span class="line"></span><br><span class="line">        JDBCDao jdbcDao = <span class="keyword">new</span> JDBCDao();</span><br><span class="line">        <span class="keyword">int</span> result = jdbcDao.login(login);</span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            out.println(<span class="string">&quot;登录成功！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (result == <span class="number">0</span>)&#123;</span><br><span class="line">            out.println(<span class="string">&quot;用户名和密码有误！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            out.println(<span class="string">&quot;系统异常！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javabean.Login;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoup</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/13 10:41</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@describe</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">&quot;jdbc:mysql://localhost:3306/lemon?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USERNAME = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PWD = <span class="string">&quot;107462&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DRIVER = <span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">login</span><span class="params">(Login login)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// a.导入驱动，加载具体的驱动类</span></span><br><span class="line">            Class.forName(DRIVER);<span class="comment">// 加载具体的驱动类</span></span><br><span class="line">            <span class="comment">// b.与数据库建立连接</span></span><br><span class="line">            connection = DriverManager.getConnection(URL, USERNAME, PWD);</span><br><span class="line">            <span class="comment">// c.发送sql，执行(增删改、【查】)</span></span><br><span class="line"></span><br><span class="line">            String sql = <span class="string">&quot;select count(*) from userss where username= ? and password =?&quot;</span>;</span><br><span class="line">            pstmt = connection.prepareStatement(sql);</span><br><span class="line">            pstmt.setString(<span class="number">1</span>, login.getUsername());</span><br><span class="line">            pstmt.setString(<span class="number">2</span>, login.getPassword());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行SQL(增删改executeUpdate()，查询executeQuery())</span></span><br><span class="line">            rs = pstmt.executeQuery(); <span class="comment">// 返回值表示 增删改 几条数据</span></span><br><span class="line">            <span class="comment">// d.处理结果</span></span><br><span class="line">            <span class="keyword">int</span> count = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                count = rs.getInt(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (rs != <span class="keyword">null</span>) rs.close();</span><br><span class="line">                <span class="keyword">if</span> (pstmt != <span class="keyword">null</span>) pstmt.close();<span class="comment">// 对象.方法</span></span><br><span class="line">                <span class="keyword">if</span> (connection != <span class="keyword">null</span>) connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Javabean&quot;&gt;&lt;a href=&quot;#Javabean&quot; class=&quot;headerlink&quot; title=&quot;Javabean&quot;&gt;&lt;/a&gt;Javabean&lt;/h2&gt;&lt;h3 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="jsp" scheme="http://example.com/categories/jsp/"/>
    
    
    <category term="jsp" scheme="http://example.com/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>6.MVC和Servlet介绍.md</title>
    <link href="http://example.com/2020/12/17/JSP%E5%92%8CServlet/6.MVC%E5%92%8CServlet%E4%BB%8B%E7%BB%8D/"/>
    <id>http://example.com/2020/12/17/JSP%E5%92%8CServlet/6.MVC%E5%92%8CServlet%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-12-17T07:02:25.000Z</published>
    <updated>2020-12-17T08:01:01.907Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MVC和Servlet介绍"><a href="#MVC和Servlet介绍" class="headerlink" title="MVC和Servlet介绍"></a>MVC和Servlet介绍</h2><h3 id="1-MVC模式"><a href="#1-MVC模式" class="headerlink" title="1.MVC模式"></a>1.MVC模式</h3><p>M：Model    ，模型  ：一个功能。用JavaBean实现。</p><p>V:View，视图： 用于展示、以及与用户交互。使用html  js  css jsp jquery等前端技术实现</p><p>C:Controller，控制器 ：接受请求，将请求跳转到模型进行处理；模型处理完毕后，再将处理的结果<br>            返回给 请求处 。 可以用jsp实现，  但是一般建议使用 Servlet实现控制器。</p><p>Jsp-&gt;Java(Servlet)-&gt;JSP</p><p><img src="E:\待办\Java-Butterfly-Transform\学习笔记\Servlet和JSP\assets\1589352618512.png" alt="1589352618512"></p><p><img src="E:\待办\Java-Butterfly-Transform\学习笔记\Servlet和JSP\assets\1589352645160.png" alt="1589352645160"></p><h3 id="2-Servlet介绍以及初步使用"><a href="#2-Servlet介绍以及初步使用" class="headerlink" title="2.Servlet介绍以及初步使用"></a>2.Servlet介绍以及初步使用</h3><p>Servlet：<br>Java类必须符合一定的 规范：<br>    a.必须继承  javax.servlet.http.HttpServlet<br>    b.重写其中的 doGet()或doPost()方法</p><p> doGet()： 接受 并处理 所有get提交方式的请求<br> doPost()：接受 并处理 所有post提交方式的请求</p><p>Servlet要想使用，必须配置<br>Serlvet2.5：web.xml<br>Servle3.0： @WebServlet</p><p>Serlvet2.5：web.xml:</p><p>项目的根目录：WebContent 、src</p><p><a href="WelcomeServlet">所在的jsp是在 WebContent目录中，因此 发出的请求WelcomeServlet  是去请求项目的根目录。</p><p>Servlet流程：<br>请求 -&gt;<url-pattern> -&gt; 根据<servlet-mapping>中的<servlet-name> 去匹配  <servlet> 中的<servlet-name>，然后寻找到<servlet-class>，求中将请求交由该<servlet-class>执行。</p><p><img src="E:\待办\Java-Butterfly-Transform\学习笔记\Servlet和JSP\assets\1589352756607.png" alt="1589352756607"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Web.xml文件配置：</span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;WelcomeServlet（servlet名字，与Servlet-mapping中的servlet-name一致就行，没有其他要求）&lt;&#x2F;servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;lemon.WelcomeServlet（servlet的包路径）&lt;&#x2F;servlet-class&gt;</span><br><span class="line">    &lt;&#x2F;servlet&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;WelcomeServlet（servlet名字，与Servlet中的servlet-name一致就行，没有其他要求）&lt;&#x2F;servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;&#x2F;WelcomeServlet（相对路径）&lt;&#x2F;url-pattern&gt;</span><br><span class="line">    &lt;&#x2F;servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>1.回顾纯手工方法创建第一个Servlet<br>步骤：<br>编写一个类，继承HttpServlet<br>重写doGet()、doPost()方法<br>编写web.xml 中的servlet映射关系</p><p>2.借助于Eclipse快速生成Servlet<br>直接新建Servlet即可！（继承、重写、web.xml  可以借助Eclipse自动生成）</p><p>servlet4.0是生成@WebServlet(name = “WelcomeServlet2”)注解，但是会报404，需要加上, urlPatterns = “/WelcomeServlet2”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@WebServlet(name &#x3D; &quot;WelcomeServlet2&quot;, urlPatterns &#x3D; &quot;&#x2F;WelcomeServlet2&quot;)</span><br></pre></td></tr></table></figure><p>###　３.Servlet生命周期：5个阶段 </p><p>加载<br>初始化： init()  ，该方法会在 Servlet被加载并实例化的以后 执行<br>服务  ：service() -&gt;doGet()  doPost<br>销毁  ：destroy()，  Servlet被系统回收时执行<br>卸载</p><p>init():<br>    a.默认第一次访问 Servlet时会被执行 （只执行这一次）<br>    b.可以修改为 Tomcat启动时自动执行<br>        i.Servlet2.5：  web.xml<br>              <servlet><br>                …<br>                   <load-on-startup>1</load-on-startup><br>                </servlet><br>            其中的“1”代表第一个。<br>        ii.Servlet3.0<br>            在注解里加：@WebServlet( value=”/WelcomeServlet” ,<strong>loadOnStartup=1</strong>  )</p><p>service() -&gt;doGet()  doPost ：调用几次，则执行几次<br>destroy()：关闭tomcat服务时，执行一次。</p><p><img src="E:\待办\Java-Butterfly-Transform\学习笔记\Servlet和JSP\assets\1589359080910.png" alt="1589359080910"></p><h3 id="4-servlet传递数据到JSP方法："><a href="#4-servlet传递数据到JSP方法：" class="headerlink" title="4.servlet传递数据到JSP方法："></a>4.servlet传递数据到JSP方法：</h3><p>1.传递字段或者对象：</p><p>在servlet中：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">字段：</span><br><span class="line">request.setAttribute(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">对象:</span><br><span class="line">UserInfo u = <span class="keyword">new</span> UserInfo（）；</span><br><span class="line">request.setAttribute(<span class="string">&quot;u&quot;</span>,u);</span><br></pre></td></tr></table></figure><p>在jsp中：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">request.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">&lt;%UserInfo u = request.getAttribute(<span class="string">&quot;u&quot;</span>);%&gt;</span><br><span class="line">页面显示它的属性的话用表达答式 ,姓名&lt;%=u.getName()%&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.传递集合：比如list</p><p>两种方法：</p><p>1.jsp表达式</p><p>2.jstl</p><p>在servlet中：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request.setAttribute(<span class="string">&quot;studentList&quot;</span>, studentList);</span><br><span class="line"><span class="comment">//也可以通过session、pageContext、application</span></span><br><span class="line"><span class="comment">//但是域范围越小越好，pageContext&lt;request&lt;session&lt;application,因此选择request。</span></span><br><span class="line"><span class="comment">//因为request域中有数据，因此需要通过请求转发来跳转（重定向会丢失数据）           request.getRequestDispatcher(&quot;studentShow.jsp&quot;).forward(request,response);</span></span><br></pre></td></tr></table></figure><p>在JSP中：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">第一种：jsp表达式</span><br><span class="line">&lt;%</span><br><span class="line">            ArrayList&lt;Student&gt; studentList = (ArrayList&lt;Student&gt;) request.getAttribute(<span class="string">&quot;studentList&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (Student student : studentList)&#123;</span><br><span class="line">        %&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=student.getSno() %&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=student.getSname() %&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=student.getSage() %&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=student.getSaddr() %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;%</span><br><span class="line">            &#125;</span><br><span class="line">     %&gt;</span><br><span class="line"></span><br><span class="line">第二种：jstl</span><br><span class="line">导jstl需要的两个jar包到lib文件夹下</span><br><span class="line">导标签：</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">        ArrayList studentList = (ArrayList) request.getAttribute(<span class="string">&quot;studentList&quot;</span>);</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;table&quot;</span>&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;学号&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;地址&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">        &lt;c:forEach items=<span class="string">&quot;$&#123;studentList&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;student&quot;</span>&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;$&#123;student.sno&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;student.sname&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;student.sage&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;student.saddr&#125;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;MVC和Servlet介绍&quot;&gt;&lt;a href=&quot;#MVC和Servlet介绍&quot; class=&quot;headerlink&quot; title=&quot;MVC和Servlet介绍&quot;&gt;&lt;/a&gt;MVC和Servlet介绍&lt;/h2&gt;&lt;h3 id=&quot;1-MVC模式&quot;&gt;&lt;a href=&quot;#1-</summary>
      
    
    
    
    <category term="jsp" scheme="http://example.com/categories/jsp/"/>
    
    
    <category term="jsp" scheme="http://example.com/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>8.三层架构优化（JDBC优化）.md</title>
    <link href="http://example.com/2020/12/17/JSP%E5%92%8CServlet/8.%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E4%BC%98%E5%8C%96%EF%BC%88JDBC%E4%BC%98%E5%8C%96%EF%BC%89/"/>
    <id>http://example.com/2020/12/17/JSP%E5%92%8CServlet/8.%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E4%BC%98%E5%8C%96%EF%BC%88JDBC%E4%BC%98%E5%8C%96%EF%BC%89/</id>
    <published>2020-12-17T07:02:25.000Z</published>
    <updated>2020-12-17T08:01:02.084Z</updated>
    
    <content type="html"><![CDATA[<h2 id="三层架构优化（JDBC优化）"><a href="#三层架构优化（JDBC优化）" class="headerlink" title="三层架构优化（JDBC优化）"></a>三层架构优化（JDBC优化）</h2><h3 id="1-三层优化"><a href="#1-三层优化" class="headerlink" title="1.三层优化"></a>1.三层优化</h3><p>1.加入接口<br>    建议面向接口开发：先接口-再实现类<br>    –service、dao加入接口<br>    –接口与实现类的命名规范<br>        接口：interface，    起名   I实体类Service        IStudentService<br>                        IStudentDao<br>        实现类：implements    起名   实体类ServiceImpl        StudentServiceImpl<br>                        StudentDaoImpl<br>        接口：    I实体类层所在包名    IStudentService、IStudentDao<br>            接口所在的包：  xxx.service        xx.dao</p><pre><code>    实现类：     实体类层所在包名Impl    StudentServiceImpl、StudentDaoImpl        实现类所在的包：xxx.service.impl        xx.dao.impl以后使用接口/实现类时，推荐写法：接口 x = new 实现类();IStudentDao studentDao = new StudentDaoImpl();</code></pre><p>2.DBUtil 通用的数据库帮助类，可以简化Dao层的代码量</p><p>帮助类 一般建议写在  xxx.util包<br>A<br>{</p><pre><code>a()&#123;    B.connection&#125;</code></pre><p>}</p><p>B<br>{<br>    static Connection connection =..<br>    b{    </p><p>​    }</p><p>}</p><p>方法重构：  将多个方法 的共同代码 提炼出来，单独写在一个方法中，然后引入该方法即可<br>a()<br>{<br>    ..<br>    c();<br>    ..<br>}</p><p>b()<br>{<br>    ..<br>    c();<br>    ..<br>}</p><p>c()<br>{<br>        [..<br>    ..<br>    …<br>    ..]<br>}</p><p>Web调试：<br>与java代码的调试 区别：启动方式不同</p><p>index.jsp -&gt;index_jsp.java -&gt;index_jsp.class </p><p>jsp-&gt;java-&gt;class<br>jsp翻译成的Java 以及编译后的class文件 存在于tomcat中的work目录中</p><h3 id="2-demo"><a href="#2-demo" class="headerlink" title="2.demo"></a>2.demo</h3><p>代码：</p><p>IStudentDao ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IStudentDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加学生</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addStudent</span><span class="params">(Student student)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteStudent</span><span class="params">(<span class="keyword">int</span> sno)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断学生是否存在</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">boolean</span> <span class="title">isExist</span><span class="params">(<span class="keyword">int</span> sno)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据学号修改学生</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateStudentBySno</span><span class="params">(<span class="keyword">int</span> sno ,Student student)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据学号查找学生</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">queryStudentBySno</span><span class="params">(<span class="keyword">int</span> sno)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找所有学生</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList <span class="title">queryAllStudent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>IStudentDaoImpl:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IStudentDaoImpl</span> <span class="keyword">implements</span> <span class="title">IStudentDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">&quot;jdbc:mysql://localhost:3306/lemon?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USERNAME = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD = <span class="string">&quot;107462&quot;</span>;</span><br><span class="line">    PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加学生</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addStudent</span><span class="params">(Student student)</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;insert into student values(?,?,?,?)&quot;</span>;</span><br><span class="line">        Object[] params = &#123;student.getSno(), student.getSname(), student.getSage(), student.getSaddr()&#125;;</span><br><span class="line">        <span class="keyword">return</span>  JDBCUtil.executeUpdate(sql, params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteStudent</span><span class="params">(<span class="keyword">int</span> sno)</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;delete from student where sno = ?&quot;</span>;</span><br><span class="line">        Object[] params = &#123;sno&#125;;</span><br><span class="line">        <span class="keyword">return</span>  JDBCUtil.executeUpdate(sql, params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断学生是否存在</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">boolean</span> <span class="title">isExist</span><span class="params">(<span class="keyword">int</span> sno)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> queryStudentBySno(sno)==<span class="keyword">null</span>? <span class="keyword">false</span> : <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据学号修改学生</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateStudentBySno</span><span class="params">(<span class="keyword">int</span> sno ,Student student)</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;update student set sname = ?, sage = ?, saddr = ? where sno = ?&quot;</span>;</span><br><span class="line">        Object[] params = &#123;student.getSname(), student.getSage(), student.getSaddr(), sno&#125;;</span><br><span class="line">        <span class="keyword">return</span>  JDBCUtil.executeUpdate(sql, params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据学号查找学生</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">queryStudentBySno</span><span class="params">(<span class="keyword">int</span> sno)</span></span>&#123;</span><br><span class="line">        Student student = <span class="keyword">null</span>;</span><br><span class="line">        String sql = <span class="string">&quot;select * from student where sno = ?&quot;</span>;</span><br><span class="line">        Object[] params = &#123;sno&#125;;</span><br><span class="line">        rs = JDBCUtil.executeQuery(sql,params);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (rs.next())&#123;</span><br><span class="line">                <span class="keyword">int</span> no = rs.getInt(<span class="string">&quot;sno&quot;</span>);</span><br><span class="line">                String sname = rs.getString(<span class="string">&quot;sname&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> sage = rs.getInt(<span class="string">&quot;sage&quot;</span>);</span><br><span class="line">                String saddr = rs.getString(<span class="string">&quot;saddr&quot;</span>);</span><br><span class="line">                student = <span class="keyword">new</span> Student(sno, sname, sage, saddr);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>  student;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtil.closeAll(rs, pstmt, JDBCUtil.connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找所有学生</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Student&gt; <span class="title">queryAllStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Student&gt; studentList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        String sql = <span class="string">&quot;select * from student&quot;</span>;</span><br><span class="line">        rs = JDBCUtil.executeQuery(sql, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                <span class="keyword">int</span> sno = rs.getInt(<span class="string">&quot;sno&quot;</span>);</span><br><span class="line">                String sname = rs.getString(<span class="string">&quot;sname&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> sage = rs.getInt(<span class="string">&quot;sage&quot;</span>);</span><br><span class="line">                String saddr = rs.getString(<span class="string">&quot;saddr&quot;</span>);</span><br><span class="line">                Student student = <span class="keyword">new</span> Student(sno, sname, sage, saddr);</span><br><span class="line">                studentList.add(student);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>  studentList;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           JDBCUtil.closeAll(rs, pstmt, JDBCUtil.connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>IStudentService:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IStudentService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addStudent</span><span class="params">(Student student)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateStudentBySno</span><span class="params">(<span class="keyword">int</span> sno, Student student)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteStudent</span><span class="params">(<span class="keyword">int</span> sno)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">queryStudentBySno</span><span class="params">(<span class="keyword">int</span> sno)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList <span class="title">queryAllStudent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>IStudentServiceImpl：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IStudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">IStudentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    IStudentDao iStudentDao = <span class="keyword">new</span> IStudentDaoImpl();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addStudent</span><span class="params">(Student student)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!iStudentDao.isExist(student.getSno()))&#123;</span><br><span class="line">            iStudentDao.addStudent(student);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateStudentBySno</span><span class="params">(<span class="keyword">int</span> sno, Student student)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (iStudentDao.isExist(sno))&#123;</span><br><span class="line">            <span class="keyword">return</span> iStudentDao.updateStudentBySno(sno,student);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteStudent</span><span class="params">(<span class="keyword">int</span> sno)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (iStudentDao.isExist(sno))&#123;</span><br><span class="line">            <span class="keyword">return</span> iStudentDao.deleteStudent(sno);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">queryStudentBySno</span><span class="params">(<span class="keyword">int</span> sno)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iStudentDao.queryStudentBySno(sno);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList <span class="title">queryAllStudent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iStudentDao.queryAllStudent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>JDBCUtil:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">&quot;jdbc:mysql://localhost:3306/lemon?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USERNAME = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD = <span class="string">&quot;107462&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通用的增删改</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">executeUpdate</span><span class="params">(String sql, Object[] params)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pstmt = getPstmt(sql, params);</span><br><span class="line">            <span class="keyword">int</span> count = JDBCUtil.pstmt.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            closeAll(<span class="keyword">null</span>, pstmt, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通用的查</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultSet <span class="title">executeQuery</span><span class="params">(String sql, Object[] params)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pstmt = getPstmt(sql, params);</span><br><span class="line">            rs = JDBCUtil.pstmt.executeQuery();</span><br><span class="line">            <span class="keyword">return</span> rs;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeAll</span><span class="params">(ResultSet rs, PreparedStatement pstmt, Connection connection)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (rs != <span class="keyword">null</span>) rs.close();</span><br><span class="line">            <span class="keyword">if</span> (pstmt != <span class="keyword">null</span>) pstmt.close();<span class="comment">// 对象.方法</span></span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) connection.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取PreparedStatement对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PreparedStatement <span class="title">getPstmt</span><span class="params">(String sql, Object[] params)</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException </span>&#123;</span><br><span class="line">        pstmt = getConnection().prepareStatement(sql);</span><br><span class="line">        <span class="keyword">if</span> (params != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; params.length; i++) &#123;</span><br><span class="line">                pstmt.setObject(i+<span class="number">1</span>, params[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  pstmt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-查找错误问题的方法和过程"><a href="#3-查找错误问题的方法和过程" class="headerlink" title="3.查找错误问题的方法和过程:"></a>3.查找错误问题的方法和过程:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.首先在报错中找到自己写的类或者方法中显示的错误</span><br><span class="line">2.如果是index_jsp._jspSerVice(index_jsp.java :162)这种错误，说明index.jsp有问题，但是index.jsp又没有162行，仔细看.java，说明是翻译后的Java文件，我们去index.jsp翻译后的index_jsp.Java文件找到162行，查看错误就行。</span><br><span class="line"></span><br><span class="line">JSP文件的翻译过程：</span><br><span class="line">index.jsp--&gt;index_jsp.java--&gt;index_jsp.class</span><br><span class="line"></span><br><span class="line">3.然后通过Debug打断点判断问题。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;三层架构优化（JDBC优化）&quot;&gt;&lt;a href=&quot;#三层架构优化（JDBC优化）&quot; class=&quot;headerlink&quot; title=&quot;三层架构优化（JDBC优化）&quot;&gt;&lt;/a&gt;三层架构优化（JDBC优化）&lt;/h2&gt;&lt;h3 id=&quot;1-三层优化&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="jsp" scheme="http://example.com/categories/jsp/"/>
    
    
    <category term="jsp" scheme="http://example.com/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>7.三层架构与添加学生demo.md</title>
    <link href="http://example.com/2020/12/17/JSP%E5%92%8CServlet/7.%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E4%B8%8E%E6%B7%BB%E5%8A%A0%E5%AD%A6%E7%94%9Fdemo/"/>
    <id>http://example.com/2020/12/17/JSP%E5%92%8CServlet/7.%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E4%B8%8E%E6%B7%BB%E5%8A%A0%E5%AD%A6%E7%94%9Fdemo/</id>
    <published>2020-12-17T07:02:25.000Z</published>
    <updated>2020-12-17T08:01:01.822Z</updated>
    
    <content type="html"><![CDATA[<h2 id="三层架构与添加学生demo"><a href="#三层架构与添加学生demo" class="headerlink" title="三层架构与添加学生demo"></a>三层架构与添加学生demo</h2><h3 id="1-介绍："><a href="#1-介绍：" class="headerlink" title="1.介绍："></a>1.介绍：</h3><p>三层架构：</p><p>​    与MVC设计模式的目标一致：都是为了解耦合、提高代码复用；</p><p>​    区别：二者对项目理解的角度不同。</p><p>三层组成:</p><p>表示层（USL，User Show Layer ;   视图层）</p><p>​    -前台：对应MVC中的View，用于与用户交互、界面的显示。</p><p>​        常用技术: jsp、js、html、css</p><p>​        代码位置: WebContent</p><p>​    -后台：对应MVC中的Controller，用于控制跳转、调用业务逻辑层</p><p>​        Servlet（SpringMVC）</p><p>​        代码位置: xxx.servlet包中</p><p>业务逻辑层（BLL，Business Logic Layer  ;  Service层）</p><p>​    -接受表示层的请求调用</p><p>​    -组装数据库访问层，逻辑性的操作（增删改查，比如增之前先判断先查询）</p><p>​    位于：xxx.service包</p><p>数据访问层（DAL， Data Access Layer  ;  Dao层）</p><p>​    -直接访问数据库的操作，原子性的操作（增删改查）</p><p>​    位于：xxx.dao包</p><p><img src="E:\待办\Java-Butterfly-Transform\学习笔记\Servlet和JSP\assets\1589435338401.png" alt="1589435338401"></p><p>三层的关系：</p><p>​    上层将请求传递给下层，下层处理后返回给上层。</p><p>Servlet：</p><p>​    一个Servlet对应一个功能，因此，如果有增删改查四个功能，则需要创建4个Servlet。</p><p><img src="E:\待办\Java-Butterfly-Transform\学习笔记\Servlet和JSP\assets\1589435954505.png" alt="1589435954505"></p><h3 id="2-demo"><a href="#2-demo" class="headerlink" title="2.demo"></a>2.demo</h3><p>往student表中添加学生</p><p>逻辑图：</p><p><img src="E:\待办\Java-Butterfly-Transform\学习笔记\Servlet和JSP\assets\1589436087961.png" alt="1589436087961"></p><p>代码：</p><p>项目结构：</p><p><img src="E:\待办\Java-Butterfly-Transform\学习笔记\Servlet和JSP\assets\1589436180248.png" alt="1589436180248"></p><p>student.jsp:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;AddStudentServlet&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        学号：&lt;input type=&quot;text&quot; name=&quot;sno&quot;&gt;&lt;/br&gt;</span><br><span class="line">        姓名：&lt;input type=&quot;text&quot; name=&quot;sname&quot;&gt;&lt;/br&gt;</span><br><span class="line">        年龄：&lt;input type=&quot;text&quot; name=&quot;sage&quot;&gt;&lt;/br&gt;</span><br><span class="line">        地址：&lt;input type=&quot;text&quot; name=&quot;saddr&quot;&gt;&lt;/br&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;添加&quot;&gt;&lt;/br&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form action=<span class="string">&quot;DeleteStudentServlet&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">        学号：&lt;input type=&quot;text&quot; name=&quot;sno&quot;&gt;&lt;/br&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;删除&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form action=<span class="string">&quot;QueryAllStudentServlet&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;查询所有学生&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>studentShow.jsp:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;entity.Student&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.omg.CORBA.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: dell</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">5</span>/<span class="number">14</span></span><br><span class="line">  Time: <span class="number">15</span>:<span class="number">28</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%--&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;--%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;table&quot;</span>&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;学号&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;地址&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">        &lt;%</span><br><span class="line">            ArrayList&lt;Student&gt; studentList = (ArrayList&lt;Student&gt;) request.getAttribute(<span class="string">&quot;studentList&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (Student student : studentList)&#123;</span><br><span class="line">        %&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=student.getSno() %&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=student.getSname() %&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=student.getSage() %&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=student.getSaddr() %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;%</span><br><span class="line">            &#125;</span><br><span class="line">        %&gt;</span><br><span class="line">        &lt;%--&lt;c:forEach items=<span class="string">&quot;$&#123;studentList&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;student&quot;</span>&gt;--%&gt;</span><br><span class="line">            &lt;%--&lt;tr&gt;--%&gt;</span><br><span class="line">                &lt;%--&lt;td&gt;$&#123;student.sno&#125;&lt;/td&gt;--%&gt;</span><br><span class="line">                &lt;%--&lt;td&gt;$&#123;student.sname&#125;&lt;/td&gt;--%&gt;</span><br><span class="line">                &lt;%--&lt;td&gt;$&#123;student.sage&#125;&lt;/td&gt;--%&gt;</span><br><span class="line">                &lt;%--&lt;td&gt;$&#123;student.saddr&#125;&lt;/td&gt;--%&gt;</span><br><span class="line">            &lt;%--&lt;/tr&gt;--%&gt;</span><br><span class="line">        &lt;%--&lt;/c:forEach&gt;--%&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>AddStudentServlet:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(name = &quot;AddStudentServlet&quot;, urlPatterns = &quot;/AddStudentServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddStudentServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sno = Integer.parseInt(request.getParameter(<span class="string">&quot;sno&quot;</span>));</span><br><span class="line">        String sname = request.getParameter(<span class="string">&quot;sname&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> sage = Integer.parseInt(request.getParameter(<span class="string">&quot;sage&quot;</span>));</span><br><span class="line">        String saddr = request.getParameter(<span class="string">&quot;saddr&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Student student = <span class="keyword">new</span> Student(sno, sname, sage, saddr);</span><br><span class="line"></span><br><span class="line">        StudentService studentService = <span class="keyword">new</span> StudentService();</span><br><span class="line">        <span class="keyword">boolean</span> result = studentService.addStudent(student);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        <span class="keyword">if</span> (result)&#123;</span><br><span class="line">            out.println(<span class="string">&quot;添加学生成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            out.println(<span class="string">&quot;添加学生失败,该学生已存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>QueryAllStudentServlet:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(name = &quot;QueryAllStudentServlet&quot; ,urlPatterns = &quot;/QueryAllStudentServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryAllStudentServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        StudentService studentService  = <span class="keyword">new</span> StudentService();</span><br><span class="line">        ArrayList studentList = studentService.queryAllStudent();</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        <span class="keyword">if</span> (studentList != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//out.println(&quot;查询成功！&quot;);</span></span><br><span class="line"><span class="comment">//            request.setAttribute(&quot;sno&quot;,student.getSno());</span></span><br><span class="line"><span class="comment">//            request.setAttribute(&quot;sname&quot;,student.getSname());</span></span><br><span class="line"><span class="comment">//            request.setAttribute(&quot;sage&quot;,student.getSage());</span></span><br><span class="line"><span class="comment">//            request.setAttribute(&quot;saddr&quot;,student.getSaddr());</span></span><br><span class="line">            request.setAttribute(<span class="string">&quot;studentList&quot;</span>, studentList);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;studentShow.jsp&quot;</span>).forward(request,response);</span><br><span class="line">            <span class="comment">//response.sendRedirect(&quot;studentShow.jsp&quot;);</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            out.println(<span class="string">&quot;该表没有学生！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Student:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sno;</span><br><span class="line">    <span class="keyword">private</span> String sname;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sage;</span><br><span class="line">    <span class="keyword">private</span> String saddr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String sname, <span class="keyword">int</span> sage, String saddr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sname = sname;</span><br><span class="line">        <span class="keyword">this</span>.sage = sage;</span><br><span class="line">        <span class="keyword">this</span>.saddr = saddr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> sno, String sname, <span class="keyword">int</span> sage, String saddr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sno = sno;</span><br><span class="line">        <span class="keyword">this</span>.sname = sname;</span><br><span class="line">        <span class="keyword">this</span>.sage = sage;</span><br><span class="line">        <span class="keyword">this</span>.saddr = saddr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSno</span><span class="params">(<span class="keyword">int</span> sno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sno = sno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSname</span><span class="params">(String sname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sname = sname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSage</span><span class="params">(<span class="keyword">int</span> sage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sage = sage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSaddr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> saddr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSaddr</span><span class="params">(String saddr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.saddr = saddr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>StudentDao:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">&quot;jdbc:mysql://localhost:3306/lemon?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USERNAME = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD = <span class="string">&quot;107462&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加学生</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addStudent</span><span class="params">(Student student)</span></span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);</span><br><span class="line"></span><br><span class="line">            String sql = <span class="string">&quot;insert into student values(?,?,?,?)&quot;</span>;</span><br><span class="line">            pstmt = connection.prepareStatement(sql);</span><br><span class="line">            pstmt.setInt(<span class="number">1</span>,student.getSno());</span><br><span class="line">            pstmt.setString(<span class="number">2</span>,student.getSname());</span><br><span class="line">            pstmt.setInt(<span class="number">3</span>,student.getSage());</span><br><span class="line">            pstmt.setString(<span class="number">4</span>,student.getSaddr());</span><br><span class="line">            <span class="keyword">int</span> count = pstmt.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (pstmt != <span class="keyword">null</span>) pstmt.close();<span class="comment">// 对象.方法</span></span><br><span class="line">                <span class="keyword">if</span> (connection != <span class="keyword">null</span>) connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteStudent</span><span class="params">(<span class="keyword">int</span> sno)</span></span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);</span><br><span class="line"></span><br><span class="line">            String sql = <span class="string">&quot;delete from student where sno = ?&quot;</span>;</span><br><span class="line">            pstmt = connection.prepareStatement(sql);</span><br><span class="line">            pstmt.setInt(<span class="number">1</span>,sno);</span><br><span class="line">            <span class="keyword">int</span> count = pstmt.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (pstmt != <span class="keyword">null</span>) pstmt.close();<span class="comment">// 对象.方法</span></span><br><span class="line">                <span class="keyword">if</span> (connection != <span class="keyword">null</span>) connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断学生是否存在</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">boolean</span> <span class="title">isExist</span><span class="params">(<span class="keyword">int</span> sno)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> queryStudentBySno(sno)==<span class="keyword">null</span>? <span class="keyword">false</span> : <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据学号查找学生</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">queryStudentBySno</span><span class="params">(<span class="keyword">int</span> sno)</span></span>&#123;</span><br><span class="line">        Student student = <span class="keyword">null</span>;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);</span><br><span class="line"></span><br><span class="line">            String sql = <span class="string">&quot;select * from student where sno = ?&quot;</span>;</span><br><span class="line">            pstmt = connection.prepareStatement(sql);</span><br><span class="line">            pstmt.setInt(<span class="number">1</span>,sno);</span><br><span class="line">            rs = pstmt.executeQuery();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rs.next())&#123;</span><br><span class="line">                <span class="keyword">int</span> no = rs.getInt(<span class="string">&quot;sno&quot;</span>);</span><br><span class="line">                String sname = rs.getString(<span class="string">&quot;sname&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> sage = rs.getInt(<span class="string">&quot;sage&quot;</span>);</span><br><span class="line">                String saddr = rs.getString(<span class="string">&quot;saddr&quot;</span>);</span><br><span class="line">                student = <span class="keyword">new</span> Student(sno,sname,sage,saddr);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> student;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (rs != <span class="keyword">null</span>) rs.close();</span><br><span class="line">                <span class="keyword">if</span> (pstmt != <span class="keyword">null</span>) pstmt.close();<span class="comment">// 对象.方法</span></span><br><span class="line">                <span class="keyword">if</span> (connection != <span class="keyword">null</span>) connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找所有学生</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList <span class="title">queryAllStudent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Student student = <span class="keyword">null</span>;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);</span><br><span class="line"></span><br><span class="line">            String sql = <span class="string">&quot;select * from student&quot;</span>;</span><br><span class="line">            pstmt = connection.prepareStatement(sql);</span><br><span class="line">            rs = pstmt.executeQuery();</span><br><span class="line"></span><br><span class="line">            ArrayList studentList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                <span class="keyword">int</span> sno = rs.getInt(<span class="string">&quot;sno&quot;</span>);</span><br><span class="line">                String sname = rs.getString(<span class="string">&quot;sname&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> sage = rs.getInt(<span class="string">&quot;sage&quot;</span>);</span><br><span class="line">                String saddr = rs.getString(<span class="string">&quot;saddr&quot;</span>);</span><br><span class="line"></span><br><span class="line">                student = <span class="keyword">new</span> Student(sno, sname, sage, saddr);</span><br><span class="line">                studentList.add(student);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> studentList;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (rs != <span class="keyword">null</span>) rs.close();</span><br><span class="line">                <span class="keyword">if</span> (pstmt != <span class="keyword">null</span>) pstmt.close();<span class="comment">// 对象.方法</span></span><br><span class="line">                <span class="keyword">if</span> (connection != <span class="keyword">null</span>) connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StudentService:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    StudentDao studentDao = <span class="keyword">new</span> StudentDao();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addStudent</span><span class="params">(Student student)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!studentDao.isExist(student.getSno()))&#123;</span><br><span class="line">            studentDao.addStudent(student);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteStudent</span><span class="params">(<span class="keyword">int</span> sno)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (studentDao.isExist(sno))&#123;</span><br><span class="line">            <span class="keyword">return</span> studentDao.deleteStudent(sno);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList <span class="title">queryAllStudent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentDao.queryAllStudent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>乱码处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    </span><br><span class="line">    request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">    response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;三层架构与添加学生demo&quot;&gt;&lt;a href=&quot;#三层架构与添加学生demo&quot; class=&quot;headerlink&quot; title=&quot;三层架构与添加学生demo&quot;&gt;&lt;/a&gt;三层架构与添加学生demo&lt;/h2&gt;&lt;h3 id=&quot;1-介绍：&quot;&gt;&lt;a href=&quot;#1-介绍</summary>
      
    
    
    
    <category term="jsp" scheme="http://example.com/categories/jsp/"/>
    
    
    <category term="jsp" scheme="http://example.com/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>9.分页.md</title>
    <link href="http://example.com/2020/12/17/JSP%E5%92%8CServlet/9.%E5%88%86%E9%A1%B5/"/>
    <id>http://example.com/2020/12/17/JSP%E5%92%8CServlet/9.%E5%88%86%E9%A1%B5/</id>
    <published>2020-12-17T07:02:25.000Z</published>
    <updated>2020-12-17T08:01:02.317Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><h3 id="1-分页介绍"><a href="#1-分页介绍" class="headerlink" title="1.分页介绍"></a>1.分页介绍</h3><p>要实现分页，必须知道  某一页的 数据 从哪里开始 到哪里结束</p><p>页面大小：每页显示的数据量</p><p>假设每页显示10条数据</p><p>mysql分页：<br>mysql:从0开始计数<br>0        0        9<br>1        10        19<br>2        20        29<br>n        n*10          (n+1)*10-1</p><p>结论：<br>分页：<br>    第n页的数据：  第(n-1)<em>10+1条  – 第n</em>10条</p><h4 id="１-１MYSQL实现分页的sql："><a href="#１-１MYSQL实现分页的sql：" class="headerlink" title="１.１MYSQL实现分页的sql："></a>１.１MYSQL实现分页的sql：</h4><p>limit  开始,多少条<br>第0页<br>select * from student limit 0,10 ;<br>第1页<br>select * from student limit 10,10 ;<br>第2页<br>select * from student limit  20,10 ;<br>第n页<br>select * from student limit n*10,10</p><p>mysql的分页语句：</p><p>select * from student limit 页数*页面大小,页面大小</p><h4 id="1-2-oracle分页："><a href="#1-2-oracle分页：" class="headerlink" title="1.2.oracle分页："></a>1.2.oracle分页：</h4><p>sqlserver/oracle:从1开始计数<br>第n页        开始        结束<br>1        1        10<br>2        11        20<br>3        21        30<br>n        (n-1)<em>10+1    n</em>10</p><p>select *from student  where sno &gt;=(n-1)<em>10+1 and sno &lt;=n</em>10 ;  –此种写法的前提：必须是Id连续 ，否则 无法满足每页显示10条数据</p><p>select rownum,t.*from student t where rownum &gt;=(n-1)*10+1 and rownum &lt;=n*10  order by sno;<br>–1.如果根据sno排序则rownum会混乱（解决方案：分开使用-&gt;先只排序，再只查询rownum） 2.rownum不能查询&gt;的数据 </p><p>select s.* from student s order by sno asc;</p><p>select rownum, t.* from<br>(select s.* from student s order by sno asc) t<br>where rownum &gt;=(n-1)<em>10+1 and rownum &lt;=n</em>10 ; ;</p><p>//ORACLE\sqlserver都是从1开始计数：  (n-1)<em>10+1    —  n</em>10<br>oracle的分页查询语句：<br>select <em>from<br>(<br>    select rownum r, t.</em> from<br>    (select s.* from student s order by sno asc) t         10000<br>)<br>where r&gt;=(n-1)<em>10+1 and &lt;=n</em>10  ;                10</p><p>优化：</p><p>select <em>from<br>(<br>    select rownum r, t.</em> from<br>    (select s.* from student s order by sno asc) t<br>    where rownum&lt;=n*10<br>)<br>where r&gt;=(n-1)*10+1  ;    </p><p>select <em>from<br>(<br>    select rownum r, t.</em> from<br>    (select s.* from student s order by sno asc) t<br>    where  rownum&lt;=页数*页面大小<br>)<br>where r&gt;=(页数-1)*页面大小+1  ;    </p><h4 id="1-1-3-SQLServer分页：-3种分页sql"><a href="#1-1-3-SQLServer分页：-3种分页sql" class="headerlink" title="1.1.3 SQLServer分页：  3种分页sql"></a>1.1.3 SQLServer分页：  3种分页sql</h4><p>row_number()    over(字段) ;</p><p>sqlserver2003:top  –此种分页SQL存在弊端（如果id值不连续，则不能保证每页数据量相等）<br>select top 页面大小 * from student where id not in<br>( select top (页数-1)*页面大小 id from student  order by sno asc )</p><p>sqlserver2005之后支持：<br>select <em>from<br>(<br>    select row_number()  over (sno order by sno asc) as r,</em> from student</p><pre><code> where r&lt;=n*10 </code></pre><p>)<br>where r&gt;=(n-1)*10+1 and  ;    </p><p>SQLServer此种分页sql与oralce分页sql的区别： 1.rownum  ，row_number()    2.oracle需要排序（为了排序，单独写了一个子查询），但是在sqlserver 中可以省略该排序的子查询  因为sqlserver中可以通过over直接排序</p><p>sqlserver2012之后支持：<br>offset fetch next only</p><p>select * from student  oreder by sno<br>offset (页数-1)*页面大小+1  rows fetch next 页面大小  rows only ;</p><p>(n-1)<em>10+1    —  n</em>10 </p><p>mysql从0开始计数，Oracle/sqlserver 从1开始计数</p><h3 id="2-分页实现："><a href="#2-分页实现：" class="headerlink" title="2.分页实现："></a>2.分页实现：</h3><p>5个变量（属性）<br>1.数据总数    100    103                    （查数据库,select count(*)..）<br>2.页面大小（每页显示的数据条数）20                  (用户自定义)<br>3.总页数                              （程序自动计算）<br>    总页数 = 100/20  =数据总数/页面大小<br>    总页数 = 103/20 = 数据总数/页面大小+1<br>    —&gt;<br>    总页数 = 数据总数%页面大小==0? 数据总数/页面大小:数据总数/页面大小+1 ;</p><p>4.当前页（页码）                              （用户自定义）<br>5.当前页的对象集合（实体类集合）：每页所显示的所有数据 （10个人信息）<br>List<Student></p><p><img src="E:\待办\Java-Butterfly-Transform\学习笔记\Servlet和JSP\assets\1589798043657.png" alt="1589798043657"></p><p>dao和DBUtil的区别：<br>dao 是处理特定 类的 数据库操作类：<br>DBUtil是通用  数据库操作类</p><h3 id="3-demo"><a href="#3-demo" class="headerlink" title="3.demo"></a>3.demo</h3><p>studentShow.jsp:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 分页需要参数：</span></span><br><span class="line"><span class="comment">        * 1.当前页：currentPage</span></span><br><span class="line"><span class="comment">        * 2.总页数：maxPage</span></span><br><span class="line"><span class="comment">        * 3.页条数：pageSize</span></span><br><span class="line"><span class="comment">        * 4.总数据：totalCount</span></span><br><span class="line"><span class="comment">        * 5.当前页对象集合：studentList</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;table&quot;</span>&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;学号&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;地址&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">        &lt;%--接收从QueryStudentByPageServlet传递过来的page,取出student对象并展示--%&gt;</span><br><span class="line">        &lt;%</span><br><span class="line">            Page p = (Page) request.getAttribute(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (Student student : p.getStudentList())&#123;</span><br><span class="line">        %&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&lt;a href=&quot;QueryStudentBySno?sno=&lt;%=student.getSno() %&gt;&quot;&gt;&lt;%=student.getSno() %&gt;&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=student.getSname() %&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=student.getSage() %&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;%=student.getSaddr() %&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;a href=&quot;DeleteStudentServlet?sno=&lt;%=student.getSno() %&gt; &quot;&gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">        &lt;%</span><br><span class="line">            &#125;</span><br><span class="line">        %&gt;</span><br><span class="line">        &lt;%--&lt;c:forEach items=<span class="string">&quot;$&#123;studentList&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;student&quot;</span>&gt;--%&gt;</span><br><span class="line">            &lt;%--&lt;tr&gt;--%&gt;</span><br><span class="line">                &lt;%--&lt;td&gt;$&#123;student.sno&#125;&lt;/td&gt;--%&gt;</span><br><span class="line">                &lt;%--&lt;td&gt;$&#123;student.sname&#125;&lt;/td&gt;--%&gt;</span><br><span class="line">                &lt;%--&lt;td&gt;$&#123;student.sage&#125;&lt;/td&gt;--%&gt;</span><br><span class="line">                &lt;%--&lt;td&gt;$&#123;student.saddr&#125;&lt;/td&gt;--%&gt;</span><br><span class="line">            &lt;%--&lt;/tr&gt;--%&gt;</span><br><span class="line">        &lt;%--&lt;/c:forEach&gt;--%&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    &lt;a href=&quot;addStudent.jsp&quot;&gt;新增&lt;/a&gt;&lt;br&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="keyword">if</span> (p.getCurrentPage() &gt;= p.getTotalPage())&#123;</span><br><span class="line">            %&gt;</span><br><span class="line">            &lt;a href=&quot;QueryStudentByPageServlet?currentPage=1&quot;&gt;首页&lt;/a&gt;</span><br><span class="line">            &lt;a href=&quot;QueryStudentByPageServlet?currentPage=&lt;%=p.getCurrentPage()-1%&gt;&quot;&gt;上一页&lt;/a&gt;</span><br><span class="line">            每页显示</span><br><span class="line">            &lt;select name=<span class="string">&quot;pageSize&quot;</span>&gt;</span><br><span class="line">                &lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;</span><br><span class="line">                &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;</span><br><span class="line">                &lt;option value=&quot;4&quot;&gt;4&lt;/option&gt;</span><br><span class="line">            &lt;/select&gt;</span><br><span class="line">            条</span><br><span class="line">            &lt;%</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (p.getCurrentPage() == <span class="number">1</span>)&#123;</span><br><span class="line">            %&gt;</span><br><span class="line">            &lt;a href=&quot;QueryStudentByPageServlet?currentPage=&lt;%=p.getCurrentPage()+1%&gt;&quot;&gt;下一页&lt;/a&gt;</span><br><span class="line">            &lt;a href=&quot;QueryStudentByPageServlet?currentPage=&lt;%=p.getTotalPage()%&gt;&quot;&gt;尾页&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">            每页显示</span><br><span class="line">            &lt;select name=<span class="string">&quot;pageSize&quot;</span>&gt;</span><br><span class="line">                &lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;</span><br><span class="line">                &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;</span><br><span class="line">                &lt;option value=&quot;4&quot;&gt;4&lt;/option&gt;</span><br><span class="line">            &lt;/select&gt;</span><br><span class="line">            条</span><br><span class="line">            &lt;%</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            %&gt;</span><br><span class="line">            &lt;a href=&quot;QueryStudentByPageServlet?currentPage=1&quot;&gt;首页&lt;/a&gt;</span><br><span class="line">            &lt;a href=&quot;QueryStudentByPageServlet?currentPage=&lt;%=p.getCurrentPage()-1%&gt;&quot;&gt;上一页&lt;/a&gt;</span><br><span class="line">            &lt;a href=&quot;QueryStudentByPageServlet?currentPage=&lt;%=p.getCurrentPage()+1%&gt;&quot;&gt;下一页&lt;/a&gt;</span><br><span class="line">            &lt;a href=&quot;QueryStudentByPageServlet?currentPage=&lt;%=p.getTotalPage()%&gt;&quot;&gt;尾页&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">            每页显示</span><br><span class="line">            &lt;select name=<span class="string">&quot;pageSize&quot;</span>&gt;</span><br><span class="line">                &lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;</span><br><span class="line">                &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;</span><br><span class="line">                &lt;option value=&quot;4&quot;&gt;4&lt;/option&gt;</span><br><span class="line">            &lt;/select&gt;</span><br><span class="line">            条</span><br><span class="line">            &lt;%</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;%--&lt;%--%&gt;</span><br><span class="line">        &lt;%--IStudentService iStudentService  = <span class="keyword">new</span> IStudentServiceImpl();--%&gt;</span><br><span class="line">        &lt;%--<span class="keyword">int</span> pageSize = <span class="number">2</span>;--%&gt;</span><br><span class="line">        &lt;%--<span class="keyword">int</span> maxPage = iStudentService.getTotalCount()%pageSize == <span class="number">0</span> ?--%&gt;</span><br><span class="line">            &lt;%--iStudentService.getTotalCount()/pageSize : iStudentService.getTotalCount()/pageSize + <span class="number">1</span> ;--%&gt;</span><br><span class="line">        &lt;%--<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= maxPage; i++) &#123;--%&gt;</span><br><span class="line">            &lt;%--out.print(<span class="string">&quot;&lt;a href=&#x27;queryStudentByPageServlet?currentPage=&#x27;+i&gt;&quot;</span>+i+<span class="string">&quot;&lt;/a&gt;&quot;</span>);--%&gt;</span><br><span class="line">        &lt;%--&#125;--%&gt;</span><br><span class="line">    &lt;%--%&gt;--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>QueryStudentByPageServlet:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(name = &quot;QueryStudentByPageServlet&quot;, urlPatterns = &quot;/QueryStudentByPageServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryStudentByPageServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            page对象要设置4个参数：</span></span><br><span class="line"><span class="comment">            1.当前页</span></span><br><span class="line"><span class="comment">            2.totalCount</span></span><br><span class="line"><span class="comment">            3.pageSize</span></span><br><span class="line"><span class="comment">            4.studentList</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//1.获取当前页</span></span><br><span class="line">        Page page = <span class="keyword">new</span> Page();</span><br><span class="line">        String cpage = request.getParameter(<span class="string">&quot;currentPage&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (cpage == <span class="keyword">null</span>)&#123;</span><br><span class="line">            cpage = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> currentPage = Integer.parseInt(cpage);</span><br><span class="line">        page.setCurrentPage(currentPage);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取总数totalCount</span></span><br><span class="line">        IStudentService iStudentService = <span class="keyword">new</span> IStudentServiceImpl();</span><br><span class="line">        <span class="keyword">int</span> totalCount = iStudentService.getTotalCount();</span><br><span class="line">        page.setTotalCount(totalCount);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取pageSize</span></span><br><span class="line">        String pSize = request.getParameter(<span class="string">&quot;pageSize&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (pSize == <span class="keyword">null</span>)&#123;</span><br><span class="line">            pSize = <span class="string">&quot;2&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> pageSize = Integer.parseInt(pSize);</span><br><span class="line">        page.setPageSize(pageSize);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.获取页面学生对象studentList</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;Student&gt; studentList = iStudentService.queryStudentByPage(currentPage,pageSize);</span><br><span class="line">            page.setStudentList(studentList);</span><br><span class="line">            System.out.println(studentList);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把page对象传递到studentShow.jsp</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;p&quot;</span>, page);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;studentShow.jsp&quot;</span>).forward(request,response);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IStudentDaoImpl:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       String sql = <span class="string">&quot;select count(1) from student&quot;</span>;</span><br><span class="line">       <span class="keyword">return</span> JDBCUtil.getTotalCount(sql);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ArrayList&lt;Student&gt; <span class="title">queryStudentByPage</span><span class="params">(<span class="keyword">int</span> courrentPage, <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">       ArrayList&lt;Student&gt; studentList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       String sql = <span class="string">&quot;SELECT * FROM student LIMIT ?,?&quot;</span>;</span><br><span class="line">       Object[] params = &#123;(courrentPage-<span class="number">1</span>)*pageSize,pageSize&#125;;</span><br><span class="line">       rs = JDBCUtil.executeQuery(sql, params);</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">               <span class="keyword">int</span> sno = rs.getInt(<span class="string">&quot;sno&quot;</span>);</span><br><span class="line">               String sname = rs.getString(<span class="string">&quot;sname&quot;</span>);</span><br><span class="line">               <span class="keyword">int</span> sage = rs.getInt(<span class="string">&quot;sage&quot;</span>);</span><br><span class="line">               String saddr = rs.getString(<span class="string">&quot;saddr&quot;</span>);</span><br><span class="line">               Student student = <span class="keyword">new</span> Student(sno, sname, sage, saddr);</span><br><span class="line">               studentList.add(student);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">           e1.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           JDBCUtil.closeAll(rs, pstmt, JDBCUtil.connection);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span>  studentList;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>IStudentServiceImpl:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList <span class="title">queryStudentByPage</span><span class="params">(<span class="keyword">int</span> courrentPage, <span class="keyword">int</span> PageSize)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Student&gt; studentList = <span class="keyword">null</span>;</span><br><span class="line">        studentList = iStudentDao.queryStudentByPage(courrentPage, PageSize);</span><br><span class="line">        <span class="keyword">return</span> studentList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iStudentDao.getTotalCount();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>JDBCUtil:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTotalCount</span><span class="params">(String sql)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = -<span class="number">1</span>;</span><br><span class="line">        rs = executeQuery(sql, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (rs.next())&#123;</span><br><span class="line">                count = rs.getInt(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtil.closeAll(rs, pstmt, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;分页&quot;&gt;&lt;a href=&quot;#分页&quot; class=&quot;headerlink&quot; title=&quot;分页&quot;&gt;&lt;/a&gt;分页&lt;/h2&gt;&lt;h3 id=&quot;1-分页介绍&quot;&gt;&lt;a href=&quot;#1-分页介绍&quot; class=&quot;headerlink&quot; title=&quot;1.分页介绍&quot;&gt;&lt;/a&gt;1</summary>
      
    
    
    
    <category term="jsp" scheme="http://example.com/categories/jsp/"/>
    
    
    <category term="jsp" scheme="http://example.com/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC</title>
    <link href="http://example.com/2020/12/17/SSM/SpringMVC/"/>
    <id>http://example.com/2020/12/17/SSM/SpringMVC/</id>
    <published>2020-12-17T07:02:25.000Z</published>
    <updated>2020-12-17T07:39:36.521Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-SpringMVC概述"><a href="#1-SpringMVC概述" class="headerlink" title="1.SpringMVC概述"></a>1.SpringMVC概述</h2><h3 id="MVC三层架构："><a href="#MVC三层架构：" class="headerlink" title="MVC三层架构："></a>MVC三层架构：</h3><p>M: Model模型，封装和映射数据（Javabean）</p><p>V：View视图，界面显示工作（.jsp）</p><p>C：Controller控制器，控制整个网站的跳转逻辑（Servlet）</p><p> <img src="https://i.loli.net/2020/11/09/DhobkrgwmzLF2MJ.png" alt="image-20201109103828763"></p><h3 id="SpringMVC三层架构"><a href="#SpringMVC三层架构" class="headerlink" title="SpringMVC三层架构"></a>SpringMVC三层架构</h3><p><img src="https://i.loli.net/2020/12/17/nyJXMvQTB1oYAc5.png" alt="image-20201113113548932"></p><h2 id="2-注解"><a href="#2-注解" class="headerlink" title="2.注解"></a>2.注解</h2><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h3><p>RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p><p>RequestMapping注解有六个属性：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># value， method</span></span></span><br><span class="line">value：     指定请求的实际地址，指定的地址可以是URI Template 模式（后面将会说明）；</span><br><span class="line"></span><br><span class="line">method：  指定请求的method类型， GET、POST、PUT、DELETE等；</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># consumes，produces</span></span></span><br><span class="line">consumes： 指定处理请求的提交内容类型（Content-Type），例如application/json, text/html;</span><br><span class="line"></span><br><span class="line">produces:    指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回；</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># params，headers</span></span></span><br><span class="line">params： 指定request中必须包含某些参数值或者不包含某些参数值，才让该方法处理。</span><br><span class="line"></span><br><span class="line">headers： 指定request中必须包含某些指定的header值，才能让该方法处理请求。</span><br></pre></td></tr></table></figure><p>Value:</p><p>URL地址可以进行通配符匹配：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?   可以替代任意一个字符,0个多个都不行，模糊和精确同时存在时，精确优先</span><br><span class="line"></span><br><span class="line">*能替代任意多个字符，和一层路径</span><br><span class="line"></span><br><span class="line">**能替代多层路径</span><br></pre></td></tr></table></figure><h3 id="PathVariable-映射URL绑定的占位符"><a href="#PathVariable-映射URL绑定的占位符" class="headerlink" title="@PathVariable  映射URL绑定的占位符"></a>@PathVariable  映射URL绑定的占位符</h3><p>通过 @PathVariable 可以将URL中占位符参数{xxx}绑定到处理器类的方法形参中@PathVariable(“xxx“) 。</p><p>然后可以拿到请求地址中的参数。</p><p>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PathVariable(&quot;xxx&quot;)</span></span><br><span class="line">通过 <span class="meta">@PathVariable</span> 可以将URL中占位符参数&#123;xxx&#125;绑定到处理器类的方法形参中<span class="meta">@PathVariable(“xxx“)</span> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@RequestMapping(value=”user/&#123;id&#125;/&#123;name&#125;”)</span></span><br><span class="line">请求路径：http:<span class="comment">//localhost:8080/hello/show5/1/james</span></span><br></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello/&#123;id&#125;/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello2</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id, <span class="meta">@PathVariable(&quot;name&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id=&quot;</span> + id);</span><br><span class="line">        System.out.println(<span class="string">&quot;name=&quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h3><p>作用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">作用：将方法的返回值，以特定的格式写入到response的body区域，进而将数据返回给客户端。</span><br><span class="line"></span><br><span class="line">当方法上面没有写ResponseBody,底层会将方法的返回值封装为ModelAndView对象。</span><br><span class="line"></span><br><span class="line">如果返回值是字符串，那么直接将字符串写到客户端；如果是一个对象，会将对象转化为json串，然后写到客户端。</span><br></pre></td></tr></table></figure><h3 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h3><p>获取请求的请求体。</p><h2 id="3-Restful架构"><a href="#3-Restful架构" class="headerlink" title="3.Restful架构"></a>3.Restful架构</h2><p>参考：</p><p>Restful例子代码；</p><p>通过get、post、put、delete四种不同的请求方式以及不同的RequestMapping区分请求方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/book/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello1</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询id=&quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/book&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;添加=&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PutMapping(&quot;/book/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello4</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改=&quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/book/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello5</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除=&quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4-SpringMVC获取请求带来的信息"><a href="#4-SpringMVC获取请求带来的信息" class="headerlink" title="4.SpringMVC获取请求带来的信息"></a>4.SpringMVC获取请求带来的信息</h2><h3 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h3><p>作用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将请求参数绑定到你控制器的方法参数上（是springmvc中接收普通参数的注解）</span><br></pre></td></tr></table></figure><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法：@RequestParam(value=”参数名”,required=”<span class="literal">true</span>/<span class="literal">false</span>”,defaultValue=””)</span><br><span class="line"> </span><br><span class="line">value：参数名</span><br><span class="line"> </span><br><span class="line">required：是否包含该参数，默认为<span class="literal">true</span>，表示该请求路径中必须包含该参数，如果不包含就报错。</span><br><span class="line"> </span><br><span class="line">defaultValue：默认参数值，如果设置了该值，required=<span class="literal">true</span>将失效，自动为<span class="literal">false</span>,如果没有传该参数，就使用默认值</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请求地址：http://localhost:8080/test?id=123</span><br></pre></td></tr></table></figure><p>controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello6</span><span class="params">(<span class="meta">@RequestParam(value = &quot;id&quot;, required = false, defaultValue = &quot;没带参数的默认值&quot;)</span> String id)</span></span>&#123;</span><br><span class="line">    <span class="comment">//String id也可以取名为其他，比如String abc,代表</span></span><br><span class="line">    <span class="comment">//abc = request.getParameter(&quot;id&quot;)</span></span><br><span class="line">    System.out.println(<span class="string">&quot;获取到了：&quot;</span> + id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过@RequestParam获取到了请求中id参数。</p><p><strong>@RequestParam和@PathVariable的区别：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/test/&#123;name&#125;?id=123</span><br><span class="line">@RequestParam获取的是id的值，是请求参数中的值。</span><br><span class="line">@PathVariable获取的是&#123;name&#125;中的name值，是请求路径上占位符的值。</span><br></pre></td></tr></table></figure><h3 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h3><p>作用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">获取请求头中某个key的值，能够将请求头中的变量值映射到控制器的参数中</span><br></pre></td></tr></table></figure><p>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、value：参数名称</span><br><span class="line"></span><br><span class="line">2、required：是否必须</span><br><span class="line"></span><br><span class="line">3、defaultValue：默认值</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello7</span><span class="params">(<span class="meta">@RequestHeader(value = &quot;user-agents&quot;, required = false)</span> String id)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;拿到请求头：&quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="CookieValue"><a href="#CookieValue" class="headerlink" title="@CookieValue"></a>@CookieValue</h3><p>作用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用来获取Cookie中的值</span><br></pre></td></tr></table></figure><p>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、value：参数名称</span><br><span class="line"></span><br><span class="line">2、required：是否必须</span><br><span class="line"></span><br><span class="line">3、defaultValue：默认值</span><br></pre></td></tr></table></figure><h3 id="HttpEntity"><a href="#HttpEntity" class="headerlink" title="HttpEntity"></a>HttpEntity</h3><p>作用：接收发过来的请求的整个请求信息。包括请求头和请求题。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;/hello12?username=zhangsan&quot;&gt;HttpEntity接收请求信息&lt;/a&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello12&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello12</span><span class="params">(HttpEntity&lt;String&gt; body)</span></span>&#123;</span><br><span class="line">        System.out.println(body);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="ResponseEntity"><a href="#ResponseEntity" class="headerlink" title="ResponseEntity"></a>ResponseEntity</h3><p>作用：响应数据到页面。可以设置响应头、响应体、响应状态码。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;/hello13&quot;&gt;ResponseEntity返回响应数据&lt;/a&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello13&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">hello13</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String body = <span class="string">&quot;&lt;h1&gt;succssssssssssssss&quot;</span>;</span><br><span class="line">        HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">        headers.add(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        ResponseEntity responseEntity = <span class="keyword">new</span> ResponseEntity&lt;String&gt;(body, headers, HttpStatus.OK);</span><br><span class="line">        System.out.println(responseEntity);</span><br><span class="line">        <span class="keyword">return</span> responseEntity;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="5-数据到页面"><a href="#5-数据到页面" class="headerlink" title="5.数据到页面"></a>5.数据到页面</h2><p>除了传入原生request和session，SpringMVC还提供了很多其他方式将数据带给页面。</p><h3 id="在方法出传入Map、Model、ModelMap"><a href="#在方法出传入Map、Model、ModelMap" class="headerlink" title="在方法出传入Map、Model、ModelMap"></a>在方法出传入Map、Model、ModelMap</h3><p><strong>Map，Model，ModelMap的作用域都是request。</strong></p><p>三者关系：</p><p>通过getclass，可以看到<code>Map</code>，<code>Model</code>，<code>ModelMap</code>最终都是<code>BindingAwareModelMap</code>在工作；相当于给<code>BindingAwareModelMap</code>中保存的东西都会被放在请求域中。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello1</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;数据输出，map&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        System.out.println(map.getClass());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;我是output1()&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello3&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello3</span><span class="params">(ModelMap modelMap)</span></span>&#123;</span><br><span class="line">        modelMap.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;我是output3()&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">&quot;false&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;success&lt;/h1&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">## 使用JSTL需要导入两个jar包</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;javax.servlet.jsp.jstl&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;taglibs&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;standard&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.1.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    </span><br><span class="line">在jsp页面导入标签：</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还会有个小问题：<br>由于Servlet版本原因，会导致EL表达式无法被解析到.，所以需要设置：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page isELIgnored=<span class="string">&quot;false&quot;</span>%&gt;</span><br></pre></td></tr></table></figure><p>或者：修改web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line">2 <span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">3</span>          <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">4</span>          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">5</span>          <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="方法返回值使用ModeAndView"><a href="#方法返回值使用ModeAndView" class="headerlink" title="方法返回值使用ModeAndView"></a>方法返回值使用ModeAndView</h3><p>ModeAndView</p><p>既包含视图信息（页面地址），也包含模型数据（给页面带的数据）；数据均保存在请求域中。</p><p>page域：在页面</p><p>session域：在一个session中，运行时间长，数据量大，容易崩。</p><p>request域：数据存放在请求域中，请求结束，数据消失，比较利于程序运行。</p><p>application域：不仅自己可以看，其他也能看到，信息不安全。</p><p>所以使用最多的是request域。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello4&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">hello4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        <span class="comment">//或者</span></span><br><span class="line">        <span class="comment">//ModelAndView modelAndView = new ModelAndView();</span></span><br><span class="line">        <span class="comment">//modelAndView.setViewName(&quot;success&quot;);</span></span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用-SessionAttributes注解为session域中暂存数据"><a href="#使用-SessionAttributes注解为session域中暂存数据" class="headerlink" title="使用@SessionAttributes注解为session域中暂存数据"></a>使用@SessionAttributes注解为session域中暂存数据</h3><p>使用<code>@SessionAttributes(value = &quot;msg&quot;)</code>注解会在给<code>BindingAwareModelMap</code>中保存数据的同时，为session中存放一份。value指定保存数据时要给session中存放的key。</p><ul><li><code>value = &#123;&quot;msg&quot;&#125;</code>：只要保存的是这种key的数据，给session中存放一份。</li><li><code>types=&#123;String.class&#125;</code>：只要保存的是这种类型的数据，给session中存放一份。</li><li>需要放在类上</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SessionAttributes(value = &quot;msg&quot;)</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutputController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;handler01&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handler01</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;你好&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;map的类型是：&quot;</span> + map.getClass());</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SpringMVC虽然提供了为session存放数据的@SessionAttributes注解，不过还是推荐使用原始API，因为使用SpringMVC提供的注解可能会引发异常。</p><h2 id="6-视图解析"><a href="#6-视图解析" class="headerlink" title="6.视图解析"></a>6.视图解析</h2><h3 id="forward转发"><a href="#forward转发" class="headerlink" title="forward转发"></a><strong>forward转发</strong></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--创建视图解析器对象--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;internalResourceViewResolver&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br><span class="line">        &lt;!--表示文件所在位置--&gt;</span><br><span class="line">        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/pages/&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;!--表示文件后缀名--&gt;</span><br><span class="line">        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>一般配置了视图解析器，在返回页面的时候会根据返回值进行拼接跳转到页面，但是如果页面放在了其他地方，而不是视图解析器配置的地方，则可以使用forward前缀指定转发或者使用相对路径。</p><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forward:转发的路径</span><br></pre></td></tr></table></figure><p>两种作用：</p><ol><li>转发到指定页面</li><li>转发到指定请求</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转发到指定页面</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello5&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;转发&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/forwardtest.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//转发到指定请求</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello6&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello6</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;转发2&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/hello5&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="redirect重定向"><a href="#redirect重定向" class="headerlink" title="redirect重定向"></a><strong>redirect重定向</strong></h3><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redirect:重定向路径</span><br></pre></td></tr></table></figure><p>两种作用：</p><ol><li>转发到指定页面</li><li>转发到指定请求</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello7&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello7</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;转发&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/forwardtest.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello8&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello8</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;转发2&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/hello7&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="转发和重定向区别："><a href="#转发和重定向区别：" class="headerlink" title="转发和重定向区别："></a><strong>转发和重定向区别：</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">区别：</span><br><span class="line">1.转发是浏览器上的网址不变，重定向时 浏览器上的网址改变为重定向的路径。</span><br><span class="line">2.转发只有一次请求，重定向实际上产生了两次请求。</span><br><span class="line">3.转发的网址必须是本站点的网址，重定向时的网址可以是任何网址。</span><br><span class="line">4.转发：以前的request中存放的变量不会失效，就像把两个页面拼到了一起。重定向：以前的request中存放的变量全部失效，并进入一个新的request作用域。</span><br><span class="line"></span><br><span class="line">转发：</span><br><span class="line">　　发送请求 --&gt;服务器运行--&gt;进行请求的重新设置，例如通过request.setAttribute(name,value)--&gt;根据转发的地址，获取该地址的网页--&gt;响应请求给浏览器</span><br><span class="line">　　</span><br><span class="line">重定向：</span><br><span class="line">　　发送请求 --&gt;服务器运行--&gt;响应请求，返回给浏览器一个新的地址与响应码--&gt;浏览器根据响应码，判定该响应为重定向，自动发送一个新的请求给服务器，请求地址为之前返回的地址--&gt;服务器运行--&gt;响应请求给浏览器</span><br><span class="line">　　</span><br><span class="line">四个注意点：</span><br><span class="line">1.重定向两次请求比较慢</span><br><span class="line">2.重定向可以避免在用户重新加载页面时两次调用相同的动作。</span><br><span class="line">3.要访问到另外一个WEB站点上的资源的情况，使用重定向。</span><br><span class="line">4.转发传值更方便。</span><br></pre></td></tr></table></figure><p><strong>浏览器控制台过滤请求</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用-xx</span><br><span class="line">例如：过滤js和css请求</span><br><span class="line">-js -css  中间用空格隔开</span><br></pre></td></tr></table></figure><h3 id="如何解析视图："><a href="#如何解析视图：" class="headerlink" title="如何解析视图："></a><strong>如何解析视图：</strong></h3><p>不论控制器返回一个String,ModelAndView,View都会转换为ModelAndView对象，由视图解析器解析视图，然后，进行页面的跳转。</p><p><img src="https://i.loli.net/2020/11/24/gKYlpj7JRiuyzv8.png" alt="image-20201124102139649"></p><p>视图解析源码分析：重要的两个接口<strong>ViewResolver和View。</strong></p><h3 id="视图和视图解析器"><a href="#视图和视图解析器" class="headerlink" title="视图和视图解析器"></a>视图和视图解析器</h3><ul><li>请求处理方法执行完成后，最终返回一个 ModelAndView 对象。对于那些返回 String，View 或 ModeMap 等类型的处理方法，*<strong>*Spring MVC**</strong> <strong><em>\</em>也会在内部将它们装配成一个\</strong> *<em>ModelAndView***</em> <strong><em>\</em>对象**</strong>，它包含了逻辑名和模型对象的视图</li><li>Spring MVC 借助*<strong>*视图解析器**</strong>（*<strong>*ViewResolver**</strong>）得到最终的视图对象（View），最终的视图可以是 JSP ，也可能是 Excel、JFreeChart等各种表现形式的视图</li><li>对于最终究竟采取何种视图对象对模型数据进行渲染，处理器并不关心，处理器工作重点聚焦在生产模型数据的工作上，从而实现 MVC 的充分解耦</li></ul><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><ul><li><strong><em>\</em>视图**</strong>的作用是渲染模型数据，将模型里的数据以某种形式呈现给客户,主要就是完成转发或者是重定向的操作.</li><li>为了实现视图模型和具体实现技术的解耦，Spring 在 org.springframework.web.servlet 包中定义了一个高度抽象的 <strong><em>\</em>View**</strong> 接口：</li></ul><h3 id="视图解析器"><a href="#视图解析器" class="headerlink" title="视图解析器"></a>视图解析器</h3><ul><li>SpringMVC 为逻辑视图名的解析提供了不同的策略，可以在 Spring WEB 上下文中*<strong>*配置一种或多种解析策略**</strong>，*<strong>*并指定他们之间的先后顺序**</strong>。每一种映射策略对应一个具体的视图解析器实现类。</li><li>视图解析器的作用比较单一：将逻辑视图解析为一个具体的视图对象。</li><li>所有的视图解析器都必须实现 ViewResolver 接口：</li></ul><h2 id="7-数据转换-amp-数据格式话-amp-数据校验"><a href="#7-数据转换-amp-数据格式话-amp-数据校验" class="headerlink" title="7.数据转换&amp;数据格式话&amp;数据校验"></a>7.数据转换&amp;数据格式话&amp;数据校验</h2><p><strong>参考：<a href="https://www.cnblogs.com/blknemo/p/13498035.html">https://www.cnblogs.com/blknemo/p/13498035.html</a></strong></p><h3 id="数据绑定流程"><a href="#数据绑定流程" class="headerlink" title="数据绑定流程"></a>数据绑定流程</h3><ol><li>Spring MVC 主框架将 ServletRequest 对象及目标方法的入参实例传递给 WebDataBinderFactory 实例，以创建 DataBinder 实例对象</li><li>DataBinder 调用装配在 Spring MVC 上下文中的 ConversionService 组件进行数据类型转换、数据格式化工作。将 Servlet 中的请求信息填充到入参对象中</li><li>调用 Validator 组件对已经绑定了请求消息的入参对象进行数据合法性校验，并最终生成数据绑定结果 BindingData 对象</li><li>Spring MVC 抽取 BindingResult 中的入参对象和校验错误对象，将它们赋给处理方法的响应入参</li></ol><p>Spring MVC 通过反射机制对目标处理方法进行解析，将请求消息绑定到处理方法的入参中。数据绑定的核心部件是 DataBinder，运行机制如下：</p><p><img src="https://i.loli.net/2020/11/25/TZ5Q93l6AgvrPOe.png" alt="image-20201125103010177"></p><h3 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h3><p>Spring MVC 上下文中内建了很多转换器，可完成大多数 Java 类型的转换工作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ConversionService converters &#x3D;</span><br><span class="line"></span><br><span class="line">java.lang.Boolean -&gt; java.lang.String :</span><br><span class="line">org.springframework.core.convert.support.ObjectToStringConverter@f874ca</span><br><span class="line">java.lang.Character -&gt; java.lang.Number : CharacterToNumberFactory@f004c9</span><br><span class="line">java.lang.Character -&gt; java.lang.String : ObjectToStringConverter@68a961</span><br><span class="line">java.lang.Enum -&gt; java.lang.String : EnumToStringConverter@12f060a</span><br><span class="line">java.lang.Number -&gt; java.lang.Character : NumberToCharacterConverter@1482ac5</span><br><span class="line">java.lang.Number -&gt; java.lang.Number : NumberToNumberConverterFactory@126c6f</span><br><span class="line">java.lang.Number -&gt; java.lang.String : ObjectToStringConverter@14888e8</span><br><span class="line">java.lang.String -&gt; java.lang.Boolean : StringToBooleanConverter@1ca6626</span><br><span class="line">java.lang.String -&gt; java.lang.Character : StringToCharacterConverter@1143800</span><br><span class="line">java.lang.String -&gt; java.lang.Enum : StringToEnumConverterFactory@1bba86e</span><br><span class="line">java.lang.String -&gt; java.lang.Number : StringToNumberConverterFactory@18d2c12</span><br><span class="line">java.lang.String -&gt; java.util.Locale : StringToLocaleConverter@3598e1</span><br><span class="line">java.lang.String -&gt; java.util.Properties : StringToPropertiesConverter@c90828</span><br><span class="line">java.lang.String -&gt; java.util.UUID : StringToUUIDConverter@a42f23</span><br><span class="line">java.util.Locale -&gt; java.lang.String : ObjectToStringConverter@c7e20a</span><br><span class="line">java.util.Properties -&gt; java.lang.String : PropertiesToStringConverter@367a7f</span><br><span class="line">java.util.UUID -&gt; java.lang.String : ObjectToStringConverter@112b07f</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p><strong>自定义转换器类</strong></p><p>总结三步：</p><ol><li><p>写一个自己的转换器类，并实现Converter&lt;S, T&gt;接口，将S类型转换为T类型</p></li><li><p>将自己的converter配置到ConversionService中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">## 在springmvc.xml中配置</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lemon.Util.MyConvert&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>告诉SpringMVC使用自己的ConversionService</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;conversionService&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>例子:</p><p>index.jsp:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;/hello9?userInfo=root-123456&quot;&gt;数据转换&lt;/a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure><p>MyConvert:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConvert</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="keyword">if</span> (!s.isEmpty() &amp;&amp; s!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            String[] split = s.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            user.setUsername(split[<span class="number">0</span>]);</span><br><span class="line">            user.setPasswrod(split[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello9&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello9</span><span class="params">(<span class="meta">@RequestParam(&quot;userInfo&quot;)</span> User user)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用户：&quot;</span> + user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="关于-mvc-annotation-driven"><a href="#关于-mvc-annotation-driven" class="headerlink" title="关于 mvc:annotation-driven"></a>关于 mvc:annotation-driven</h3><ul><li><p><code>&lt;mvc:annotation-driven/&gt;</code> 会自动注册RequestMappingHandlerMapping、RequestMappingHandlerAdapter 与 ExceptionHandlerExceptionResolver 三个bean。</p></li><li><p>还将提供以下支持：</p><ul><li>支持使用 ConversionService 实例对表单参数进行类型转换</li><li>支持使用 @NumberFormat annotation、@DateTimeFormat 注解完成数据类型的格式化</li><li>支持使用 @Valid 注解对 JavaBean 实例进行 JSR 303 验证</li><li>支持使用 @RequestBody 和 @ResponseBody 注解</li></ul></li></ul><h3 id="数据格式化"><a href="#数据格式化" class="headerlink" title="数据格式化"></a>数据格式化</h3><p> 对属性对象的输入/输出进行格式化，从其本质上讲依然属于 “类型转换” 的范畴。</p><p>Spring 在格式化模块中定义了一个实现 ConversionService 接口的 FormattingConversionService 实现类，该实现类扩展了 GenericConversionService，因此它既具有类型转换的功能，又具有格式化的功能</p><p>FormattingConversionService 拥有一个 FormattingConversionServiceFactroyBean 工厂类，后者用于在 Spring 上下文中构造前者</p><p>FormattingConversionServiceFactroyBean 内部已经注册了:</p><ul><li>NumberFormatAnnotationFormatterFactroy：支持对数字类型的属性使用 @NumberFormat 注解</li><li>JodaDateTimeFormatAnnotationFormatterFactroy：支持对日期类型的属性使用 @DateTimeFormat 注解</li></ul><p>装配了 FormattingConversionServiceFactroyBean 后，就可以在 Spring MVC 入参绑定及模型数据输出时使用注解驱动了。<br> <code>&lt;mvc:annotation-driven/&gt;</code> 默认创建的 ConversionService 实例即为 FormattingConversionServiceFactroyBean</p><h4 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a><strong>日期格式化</strong></h4><p>@DateTimeFormat 注解可对 java.util.Date、java.util.Calendar、java.long.Long 时间类型进行标注：</p><ul><li><p>pattern 属性：类型为字符串。指定解析/格式化字段数据的模式，如：”yyyy-MM-dd hh:mm:ss”</p></li><li><p>iso 属性：类型为 DateTimeFormat.ISO。指定解析/格式化字段数据的ISO模式，包括四种：ISO.NONE（不使用） – 默 认、ISO.DATE(yyyy-MM-dd) 、ISO.TIME(hh:mm:ss.SSSZ)、ISO.DATE_TIME(yyyy-MM-dd hh:mm:ss.SSSZ)</p></li><li><p>style 属性：字符串类型。通过样式指定日期时间的格式，由两位字符组成，第一位表示日期的格式，第二位表示时间的格式：S：短日期/时间格式、M：中日期/时间格式、L：长日期/时间格式、F：完整日期/时间格式、-：忽略日期或时间格式</p></li></ul><h4 id="数值格式化"><a href="#数值格式化" class="headerlink" title="数值格式化"></a>数值格式化</h4><p>@NumberFormat 可对类似数字类型的属性进行标注，它拥有两个互斥的属性：</p><ul><li>style：类型为 NumberFormat.Style。用于指定样式类型，包括三种：Style.NUMBER（正常数字类型）、Style.CURRENCY（货币类型）、 Style.PERCENT（百分数类型）</li><li>pattern：类型为 String，自定义样式，如patter=”#,###”；</li></ul><p>例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@DateTimeFormat(pattern=&quot;yyyy/MM/dd&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NumberFormat(pattern=&quot;#,###.###&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Double wages;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/handle19&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handle19</span><span class="params">(<span class="meta">@ModelAttribute(&quot;user&quot;)</span> User user)</span> </span>&#123;</span><br><span class="line">    user.setId(<span class="number">1000</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h3><h4 id="JSR303"><a href="#JSR303" class="headerlink" title="JSR303"></a>JSR303</h4><ul><li><p>JSR 303 是 Java 为 Bean 数据合法性校验提供的标准框架，它已经包含在 JavaEE 6.0 中</p></li><li><p>JSR 303 通过在 Bean 属性上标注类似于 @NotNull、@Max 等标准的注解指定校验规则，并通过标准的验证接口对 Bean 进行验证</p><table><thead><tr><th>注解</th><th>功能说明</th></tr></thead><tbody><tr><td>@Null</td><td>被注解的元素必须为null</td></tr><tr><td>@NotNull</td><td>被注解的元素必须不为null</td></tr><tr><td>@AssertTure</td><td>被注解的元素必须为true</td></tr><tr><td>@AssertFalse</td><td>被注解的元素必须为false</td></tr><tr><td>@Min(value)</td><td>被注解的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td>@Max(value)</td><td>被注解的元素必须是一个数字其值必须小于等于指定的最大值</td></tr><tr><td>@DecimalMin(value)</td><td>被注解的元素必须是一个数字其值必须大于等于指定的最小值</td></tr><tr><td>@DecimalMax(value)</td><td>被注解的元素必须是一个数字其值必须小于等于指定的最大值</td></tr><tr><td>@Size(max,min)</td><td>被注解的元素的大小必须在指定的范围内</td></tr><tr><td>@Digits(integer,fraction)</td><td>被注解的元素必须是一个数字，其值必须在可接受的范围内</td></tr><tr><td>@Past</td><td>被注解的元素必须是一个过去的日期</td></tr><tr><td>@Future</td><td>被注解的元素必须是一个将来的日期</td></tr><tr><td>@Pattern(value)</td><td>被注解的元素必须符合指定的正则表达式</td></tr></tbody></table></li></ul><h4 id="Hibernate-Validator-扩展注解"><a href="#Hibernate-Validator-扩展注解" class="headerlink" title="Hibernate Validator 扩展注解"></a>Hibernate Validator 扩展注解</h4><p>Hibernate Validator 是 JSR 303 的一个参考实现，除支持所有标准的校验注解外，它还支持以下的扩展注解</p><table><thead><tr><th>注解</th><th>功能说明</th></tr></thead><tbody><tr><td>@Email</td><td>被注解的元素必须是电子邮箱地址</td></tr><tr><td>@Length</td><td>被注解的字符串的大小必须在指定的范围内</td></tr><tr><td>@NotEmpty</td><td>被注解的字符串必须非空</td></tr><tr><td>@Range</td><td>被注解的元素必须在合适的范围内</td></tr></tbody></table><h4 id="Spring-MVC-数据校验"><a href="#Spring-MVC-数据校验" class="headerlink" title="Spring MVC 数据校验"></a>Spring MVC 数据校验</h4><ul><li><p>Spring 4.0 拥有自己独立的数据校验框架，同时支持 JSR 303 标准的校验框架。</p></li><li><p>Spring 在进行数据绑定时，可同时调用校验框架完成数据校验工作。在 Spring MVC 中，可直接通过注解驱动的方式进行数据校验</p></li><li><p>Spring 的 LocalValidatorFactroyBean 既实现了 Spring 的 Validator 接口，也实现了 JSR 303 的 Validator 接口。只要在 Spring 容器中定义了一个 LocalValidatorFactoryBean，即可将其注入到需要数据校验的 Bean 中。</p></li><li><p>Spring 本身并没有提供 JSR303 的实现，所以必须将 JSR303 的实现者的 jar 包放到类路径下。</p></li><li><p><code>&lt;mvc:annotation-driven/&gt;</code> 会默认装配好一个 LocalValidatorFactoryBean，通过在处理方法的入参上标 注 @valid 注解即可让 Spring MVC 在完成数据绑定后执行数据校验的工作</p></li><li><p>在已经标注了 JSR303 注解的表单/命令对象前标注一个 @Valid，Spring MVC 框架在将请求参数绑定到该入参对象后，就会调用校验框架根据注解声明的校验规则实施校验</p></li><li><p>Spring MVC 是通过对处理方法签名的规约来保存校验结果的：前一个表单/命令对象的校验结果保存到随后的入参中，这个保存校验结果的入参必须是 BindingResult 或 Errors 类型，这两个类都位于 org.springframework.validation 包中</p></li><li><p>需校验的 Bean 对象和其绑定结果对象或错误对象时成对出现的，它们 之间不允许声明其他的入参</p></li><li><p>Errors 接口提供了获取错误信息的方法，如 getErrorCount() 或 getFieldErrors(String field)</p></li><li><p>BindingResult 扩展了 Errors 接口</p></li></ul><p><strong>使用步骤：</strong></p><ol><li><p>导入依赖</p></li><li><p>给Javabean的属性添加校验注解</p></li><li><p>在springmvc封装对象的时候,使用@Valid告诉springmvc这个Javabean需要校验</p></li><li><p>获取校验结果—-BindingResult</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">在表单/命令对象类的属性中标注校验注解，在处理方法对 应的入参前添加 <span class="meta">@Valid</span>，Spring MVC 就会实施校验并将校验结果保存在被校验入参对象之后的 BindingResult 或 Errors 入参中。</span><br><span class="line">常用方法：</span><br><span class="line">    <span class="function">FieldError <span class="title">getFieldError</span><span class="params">(String field)</span></span></span><br><span class="line"><span class="function">    List <span class="title">getFieldErrors</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    Object <span class="title">getFieldValue</span><span class="params">(String field)</span></span></span><br><span class="line"><span class="function">    Int <span class="title">getErrorCount</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//页面显示错误信息</span></span></span><br><span class="line"><span class="function">Spring MVC 除了会将表单/命令对象的校验结果保存到对应的 BindingResult 或 Errors 对象中外，还会将所有校验 结果保存到 “隐含模型”</span></span><br><span class="line"><span class="function">即使处理方法的签名中没有对应于表单/命令对象的结果入参，校验结果也会保存在 “隐含对象” 中。</span></span><br><span class="line"><span class="function">隐含模型中的所有数据最终将通过 HttpServletRequest 的属性列表暴露给 JSP 视图对象，因此在 JSP 中可以获取错误信息</span></span><br><span class="line"><span class="function">方法:</span></span><br><span class="line"><span class="function">1.从BindingResult 中获取</span></span><br><span class="line"><span class="function">    2.直接将错误信息写在Javabean的属性上</span></span><br><span class="line"><span class="function">    <span class="comment">//@Length(min = 6, max = 16, message = &quot;密码需要6-16位&quot;)</span></span></span><br></pre></td></tr></table></figure></li><li><p>根据不同的校验结果进行处理</p></li></ol><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>1.导入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.6.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.index.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/hello9&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;passwrod&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line">   <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Length(min = 6, max = 16)</span></span><br><span class="line">   <span class="keyword">private</span> String passwrod;</span><br></pre></td></tr></table></figure><p>3.controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello9&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello9</span><span class="params">(<span class="meta">@Valid</span> User user, BindingResult bindingResult, Model model)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> b = bindingResult.hasErrors();</span><br><span class="line">        <span class="keyword">if</span> (b)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;has error&quot;</span>);</span><br><span class="line">            List&lt;FieldError&gt; allErrors = bindingResult.getFieldErrors();</span><br><span class="line">            HashMap&lt;String, String&gt; errorMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (FieldError field : allErrors) &#123;</span><br><span class="line">                System.out.println(field.getField());</span><br><span class="line">                errorMap.put(field.getField(), field.getDefaultMessage());</span><br><span class="line">            &#125;</span><br><span class="line">            model.addAttribute(<span class="string">&quot;errors&quot;</span>,errorMap);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;用户：&quot;</span> + user);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>4.error.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">error</span><br><span class="line">$&#123;errors.username&#125;</span><br><span class="line">$&#123;errors.passwrod&#125;</span><br></pre></td></tr></table></figure><h4 id="提示消息国际化"><a href="#提示消息国际化" class="headerlink" title="提示消息国际化"></a>提示消息国际化</h4><p>每个属性在数据绑定和数据校验发生错误时，都会生成一个对应的 FieldError 对象。</p><p>当一个属性校验失败后，校验框架会为该属性生成 4 个消息代码，这些代码以校验注解类名为前缀，结合 modleAttribute、属性名及属性类型名生成多个对应的消息代码：例如 User 类中的 password 属性标准了一个 @Pattern 注解，当该属性值不满足 @Pattern 所定义的规则时, 就会产生以下 4 个错误代码：</p><ul><li>Pattern.user.password</li><li>Pattern.password</li><li>Pattern.java.lang.String</li><li>Pattern</li></ul><p>当使用 Spring MVC 标签显示错误消息时， Spring MVC 会查看 WEB 上下文是否装配了对应的国际化消息，如果没有，则显示默认 的错误消息，否则使用国际化消息。</p><p>若数据类型转换或数据格式转换时发生错误，或该有的参数不存在，或调用处理方法时发生错误，都会在隐含模型中创建错误消息。其错误代码前缀说明如下：</p><ul><li><p>required：必要的参数不存在。如 @RequiredParam(“param1”) 标注了一个入参，但是该参数不存在</p></li><li><p>typeMismatch：在数据绑定时，发生数据类型不匹配的问题</p></li><li><p>methodInvocation：Spring MVC 在调用处理方法时发生了错误</p></li></ul><p><strong>步骤</strong>:</p><ol><li><p>编写国际化的文件</p></li><li><p>让Springmvc管理国际化资源文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;messageSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;i18n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>       </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">value值为文件基础名:如il8n_error.properties</span><br></pre></td></tr></table></figure></li><li><p>页面取值</p></li></ol><h2 id="8-Ajax"><a href="#8-Ajax" class="headerlink" title="8.Ajax"></a>8.Ajax</h2><p>1.导依赖</p><p>2.写配置</p><p>3.测试</p><h2 id="9-文件上传与下载"><a href="#9-文件上传与下载" class="headerlink" title="9.文件上传与下载"></a>9.文件上传与下载</h2><p>1.导jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.在springmvc.xml中配置multiPartResolver：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456456123&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.写页面发请求</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/upload&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;请选择文件：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;开始上传&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>4.控制器上传图片</p><p>步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.MultipartFile获取文件地址</span><br><span class="line"></span><br><span class="line">2.将文件写入目标文件地址（transferTo）</span><br></pre></td></tr></table></figure><p>多文件上传步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.MultipartFile[]获取多个文件地址</span><br><span class="line"></span><br><span class="line">2.遍历数组，将文件写入目标文件地址（transferTo）</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/upload&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!file.isEmpty()) &#123;</span><br><span class="line">            String storePath= <span class="string">&quot;E:\\编程\\学习项目\\SpringMVC01\\upload&quot;</span>;<span class="comment">//存放我们上传的文件路径</span></span><br><span class="line">            String fileName = file.getOriginalFilename();</span><br><span class="line">            File filepath = <span class="keyword">new</span> File(storePath, fileName);</span><br><span class="line">            <span class="keyword">if</span> (!filepath.getParentFile().exists()) &#123;</span><br><span class="line">                filepath.getParentFile().mkdirs();<span class="comment">//如果目录不存在，创建目录</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                file.transferTo(<span class="keyword">new</span> File(storePath+File.separator+fileName));<span class="comment">//把文件写入目标文件地址</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;<span class="comment">//返回到成功页面</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;<span class="comment">//返回到失败的页面</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>文件下载：</strong></p><p>步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.获得下载文件的路径</span><br><span class="line"></span><br><span class="line">2.获得字节输入流或者文件输入流</span><br><span class="line"></span><br><span class="line">3.创建byte数组接收流 available:获取输入流所读取的文件的最大字节数</span><br><span class="line"></span><br><span class="line">4.把字节读取到数组中</span><br><span class="line"></span><br><span class="line">5.返回响应到浏览器</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;download/&#123;filename&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; download(<span class="meta">@PathVariable</span> String filename) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//获得下载文件的路径(这里绝对路径)</span></span><br><span class="line">        String filepath= <span class="string">&quot;E:\\编程\\学习项目\\SpringMVC01\\upload\\&quot;</span>+filename + <span class="string">&quot;.png&quot;</span>;</span><br><span class="line">        System.out.println(filename);</span><br><span class="line">        File file =<span class="keyword">new</span> File(filepath);</span><br><span class="line">        <span class="comment">//获得字节输入流或者文件输入流</span></span><br><span class="line">        InputStream in = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        <span class="comment">//available:获取输入流所读取的文件的最大字节数</span></span><br><span class="line">        <span class="keyword">byte</span>[] body = <span class="keyword">new</span> <span class="keyword">byte</span>[in.available()];</span><br><span class="line">        <span class="comment">//把字节读取到数组中</span></span><br><span class="line">        in.read(body);</span><br><span class="line">        <span class="comment">//设置请求头</span></span><br><span class="line">        MultiValueMap&lt;String, String&gt; headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">        headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attchement;filename=&quot;</span> + file.getName());</span><br><span class="line">        <span class="comment">//设置响应状态</span></span><br><span class="line">        HttpStatus statusCode = HttpStatus.OK;</span><br><span class="line">        ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; entity = <span class="keyword">new</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt;(body, headers, statusCode);</span><br><span class="line">        in.close();</span><br><span class="line">        <span class="keyword">return</span> entity;<span class="comment">//返回</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="10-拦截器"><a href="#10-拦截器" class="headerlink" title="10.拦截器"></a>10.拦截器</h2><p>参考博客：<a href="https://www.cnblogs.com/black-spike/p/7813238.html">https://www.cnblogs.com/black-spike/p/7813238.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-SpringMVC概述&quot;&gt;&lt;a href=&quot;#1-SpringMVC概述&quot; class=&quot;headerlink&quot; title=&quot;1.SpringMVC概述&quot;&gt;&lt;/a&gt;1.SpringMVC概述&lt;/h2&gt;&lt;h3 id=&quot;MVC三层架构：&quot;&gt;&lt;a href=&quot;#M</summary>
      
    
    
    
    <category term="SSM" scheme="http://example.com/categories/SSM/"/>
    
    <category term="SpringMVC" scheme="http://example.com/categories/SSM/SpringMVC/"/>
    
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>线程池详解</title>
    <link href="http://example.com/2020/12/17/java%E5%B9%B6%E5%8F%91/Java%E5%B9%B6%E5%8F%91%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89--%E7%BA%BF%E7%A8%8B%E6%B1%A0%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2020/12/17/java%E5%B9%B6%E5%8F%91/Java%E5%B9%B6%E5%8F%91%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89--%E7%BA%BF%E7%A8%8B%E6%B1%A0%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-12-17T07:02:25.000Z</published>
    <updated>2020-12-17T07:48:56.753Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java并发（十三）–线程池详解"><a href="#Java并发（十三）–线程池详解" class="headerlink" title="Java并发（十三）–线程池详解"></a>Java并发（十三）–线程池详解</h2><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>[TOC]</p><h3 id="一、线程池介绍"><a href="#一、线程池介绍" class="headerlink" title="一、线程池介绍"></a>一、线程池介绍</h3><h5 id="1-什么是线程池？"><a href="#1-什么是线程池？" class="headerlink" title="1. 什么是线程池？"></a>1. 什么是线程池？</h5><p>​    线程池也是一种多线程处理方式，处理过程中将任务提交到线程池，任务执行交由线程池来管理。</p><h5 id="2-创建线程池的原因"><a href="#2-创建线程池的原因" class="headerlink" title="2.创建线程池的原因"></a>2.创建线程池的原因</h5><p>​    如果每个请求都创建一个线程去处理，服务器的资源很快别耗尽，使用线程池可减少创建线程的次数，避免反复创建并销毁线程带来的开销问题，每个工作线程都被重复利用，可执行多个任务。 </p><ol><li>反复创建线程开销大。</li><li>过多的线程会占用太多内存。</li></ol><h5 id="3-线程池的好处"><a href="#3-线程池的好处" class="headerlink" title="3.线程池的好处"></a>3.线程池的好处</h5><ul><li>加快响应速度</li><li>合理利用CPU资源</li><li>统一管理线程</li></ul><h3 id="二、创建和停止线程池"><a href="#二、创建和停止线程池" class="headerlink" title="二、创建和停止线程池"></a>二、创建和停止线程池</h3><h5 id="1-线程池构造函数的参数"><a href="#1-线程池构造函数的参数" class="headerlink" title="1.线程池构造函数的参数"></a>1.线程池构造函数的参数</h5><p><img src="https://img-blog.csdnimg.cn/20200415153311683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDg5OTA3,size_16,color_FFFFFF,t_70" alt="1586914315611"></p><p>corePoolSize：</p><p>​    是线程池中的核心线程数量，不会被回收。</p><p>maximumPoolSize:</p><p>​    线程不够用时线程池可以创建的最大线程数量。</p><p>workQueue：</p><p>​    阻塞队列，存储等待执行的任务，执行FIFO原则。</p><p>有三种常见的队列类型：</p><ul><li>直接交换队列: SynchronousQueue，内部没有容量，只是作为中转，所所以maximumPoolSize需要设置的大一些。</li><li>无界队列：LinkedBlockingQueue，不会被塞满。maximumPoolSize设置多大也没有影响。但是如果任务处理不够快，容易造成内存浪费或者OOM。</li><li>有界队列：ArrayBlockingQueue。</li></ul><p>KeepAliveTime:</p><p>​    空闲线程的保留的时间。</p><p>unit：</p><p>​    KeepAliveTime的时间单位。</p><p>handler：</p><p>​    线程的饱和策略，一种拒绝策略，在任务满了以后，拒绝执行某些任务。</p><p>ThreadFactory：</p><p>​    创建线程的线程工厂。默认使用Executors.defaultThreadFactory(),创建的线程都在同一个线程组，拥有同样的优先级，都不是守护线程。如果自己指定ThreadFactory,那么就可以改变线程名、线程组、优先级、是否是守护线程。</p><p>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">DefaultThreadFactory() &#123;</span><br><span class="line">            SecurityManager s = System.getSecurityManager();</span><br><span class="line">            group = (s != <span class="keyword">null</span>) ? s.getThreadGroup() :</span><br><span class="line">                                  Thread.currentThread().getThreadGroup();</span><br><span class="line">            namePrefix = <span class="string">&quot;pool-&quot;</span> +</span><br><span class="line">                          poolNumber.getAndIncrement() +</span><br><span class="line">                         <span class="string">&quot;-thread-&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">            Thread t = <span class="keyword">new</span> Thread(group, r,</span><br><span class="line">                                  namePrefix + threadNumber.getAndIncrement(),</span><br><span class="line">                                  <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (t.isDaemon())</span><br><span class="line">                t.setDaemon(<span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (t.getPriority() != Thread.NORM_PRIORITY)</span><br><span class="line">                t.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><strong>线程池中接收任务后的流程：</strong></p><p>1.当前线程数小于coreThreads核心线程数时，即时线程池中其他线程是空闲的，也会创建线程新线程来运行新任务。</p><p>2.当前线程数大于核心线程数小于max最大线程数时，会放入工作队列中，只有工作队列满了才会创建线程。</p><p>3.如果工作队列满了并且当前线程数大于或等于最大线程数，会采用Handler执行拒绝策略。</p><p><img src="https://img-blog.csdnimg.cn/20200415153054965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMDg5OTA3,size_16,color_FFFFFF,t_70" alt="1586914813003"></p><p><strong>增减线程的特点</strong>：</p><ol><li>如果核心线程数等于最大线程数，则线程池的大小是固定的。</li><li>线程池希望保持较少的线程数，只有在负载变得很大时才增加。</li><li>通过设置maximumPoolSize为很高的值，例如Integer.MAX_value，可以允许线程池容纳任意数量的并发任务。</li><li> 只有在队列填满时才创建多余corePoolSize的线程，所以如果使用的是无界队列，例如LinkedBlockingQueue，那么线程数就不会超过corePoolSize。 </li></ol><h5 id="2-常见的几种线程池以及应用场景"><a href="#2-常见的几种线程池以及应用场景" class="headerlink" title="2.常见的几种线程池以及应用场景"></a>2.常见的几种线程池以及应用场景</h5><p>1.newSingleThreadExecutor</p><p>​    创建一个单线程化的线程池，唯一工作是执行任务，保证所有任务按照指定顺序执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleThreadPoolTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newSingleThreadExecutor();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            executorService.execute(<span class="keyword">new</span> Task());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">            (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                    <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                    <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到corePoolSize和maxPoolSize都是1，队列也是无界队列LinkedBlockingQueue，也会有请求堆积的问题。导致占用大量内存。</p><p>2.newFixedThreadPool</p><p>​    创建一个指定工作线程数量的线程池，可控制线程最大并发数，超出的线程在队列中等待。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FixedThreadPoolTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">4</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            executorService.execute(<span class="keyword">new</span> Task());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                      <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到，corePoolSize和MaxPoolSize的值相等，不会有线程被回收，存活时间为0s,队列采用的是无界队列LinkedBlockingQueue。由于无界队列是没有容量的，导致请求数越来越多且处理不过来的时候，会造成占用大量内存，以及OOM的情况。</p><p>3.newCachedThreadPool</p><p>​    可缓存线程池，如果线程池超过处理需要，可灵活回收空闲线程，若无可回收则新建线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CachedThreadPoolTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            executorService.execute(<span class="keyword">new</span> Task());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                      <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到工作队列使用的SynchronousQueue，所以没有容量来存储线程，maxPoolSize为Integer.VALUE,这可能会创建数量非常多的线程，有可能导致OOM。</p><p>4.newScheduledThreadPool</p><p>​    创建一个支持定时或周期性任务执行的线程池。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledThreadPoolTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//scheduledExecutorService.schedule(new Task(),3,TimeUnit.SECONDS);  等待3秒执行任务</span></span><br><span class="line">        <span class="comment">//1秒后执行任务，然后每隔3秒重复执行。</span></span><br><span class="line">        scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> Task(),<span class="number">1</span>,<span class="number">3</span>,TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newScheduledThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ScheduledThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="number">0</span>, NANOSECONDS,</span><br><span class="line">              <span class="keyword">new</span> DelayedWorkQueue());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>内部使用的是延迟队列。</p><p>JDK1.8新加的线程池：</p><p>workStealingPool:</p><p>特点：</p><p>​    1.子任务。</p><p>​    2.窃取。</p><p>应用场景：</p><p>newSingleThreadExecutor</p><p>​    适用于一个任务一个任务执行的场景。</p><p>newFixedThreadPool：</p><p>​    适用于执行长期的任务，性能好很多。</p><p>newCachedThreadPool</p><p>​    适用于执行很多短期异步的小程序或者负载较轻的服务器。</p><p>newScheduleThreadPool</p><p>​    适用于周期性执行任务的场景。</p><p>四种线程池构造函数参数：</p><p><img src="https://img-blog.csdnimg.cn/20200415153122837.png" alt="1586921435365"></p><h5 id="3-线程池的线程数量如何设定"><a href="#3-线程池的线程数量如何设定" class="headerlink" title="3.线程池的线程数量如何设定"></a>3.线程池的线程数量如何设定</h5><p>1.CPU密集型：线程数=按照核数或者核数+1设定。</p><p>2.IO密集型：线程数=CPU核数*（1+平均等待时间/平均工作时间）</p><h5 id="4-停止线程池"><a href="#4-停止线程池" class="headerlink" title="4.停止线程池"></a>4.停止线程池</h5><p>1.shutdown</p><p>等待线程池中执行的任务和等待队列中的任务执行完毕就停止，而在执行shutdown之后任新加入任务会报异常。</p><p>2.isShutdown</p><p>判断线程池是否进入停止状态。</p><p>3.isTerminated</p><p>判断整个线程是否都停止了。</p><p>4.awaitTermination</p><p>等待一段时间，线程停止了返回true。否则返回false。</p><p>5.shutdownNow</p><p>立刻停止线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FixedThreadPoolTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            executorService.execute(<span class="keyword">new</span> Task());</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">        List&lt;Runnable&gt; runnableList = executorService.shutdownNow();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//System.out.println(executorService.isShutdown());</span></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        <span class="keyword">boolean</span> b = executorService.awaitTermination(<span class="number">12</span>, TimeUnit.SECONDS);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        <span class="comment">//System.out.println(executorService.isShutdown());</span></span><br><span class="line">        <span class="comment">//System.out.println(executorService.isTerminated());</span></span><br><span class="line">        <span class="comment">//executorService.execute(new Task());</span></span><br><span class="line">        <span class="comment">//Thread.sleep(10000);</span></span><br><span class="line">        <span class="comment">//System.out.println(executorService.isTerminated());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、线程池拒绝策略"><a href="#三、线程池拒绝策略" class="headerlink" title="三、线程池拒绝策略"></a>三、线程池拒绝策略</h3><p>拒绝时机：</p><p>1.当Executor关闭时，提交新任务被拒绝。</p><p>2.以及当Executor对最大线程和工作队列容量使用有限边界并已经饱和时。</p><p>四种拒绝策略：</p><p>1.AbortPolice</p><p>​    直接抛出异常。默认策略。</p><p>2.DiscardPolice</p><p>​    抛弃当前任务.</p><p>3.DiscardOldestPolice</p><p>​    抛弃队列中最早的任务</p><p>4.CallerRunsPolice</p><p>​    用调用者所在线程来执行任务。</p><h3 id="四、钩子方法"><a href="#四、钩子方法" class="headerlink" title="四、钩子方法"></a>四、钩子方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述：     演示每个任务执行前后放钩子函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PauseableThreadPool</span> <span class="keyword">extends</span> <span class="title">ThreadPoolExecutor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> Condition unpaused = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isPaused;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PauseableThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize, <span class="keyword">int</span> maximumPoolSize, <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                               TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                               BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PauseableThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize, <span class="keyword">int</span> maximumPoolSize, <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                               TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                               ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PauseableThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize, <span class="keyword">int</span> maximumPoolSize, <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                               TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                               RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PauseableThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize, <span class="keyword">int</span> maximumPoolSize, <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                               TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                               ThreadFactory threadFactory, RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory,</span><br><span class="line">                handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeExecute</span><span class="params">(Thread t, Runnable r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.beforeExecute(t, r);</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (isPaused) &#123;</span><br><span class="line">                unpaused.await();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            isPaused = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            isPaused = <span class="keyword">false</span>;</span><br><span class="line">            unpaused.signalAll();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        PauseableThreadPool pauseableThreadPool = <span class="keyword">new</span> PauseableThreadPool(<span class="number">10</span>, <span class="number">20</span>, <span class="number">10l</span>,</span><br><span class="line">                TimeUnit.SECONDS, <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;());</span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;我被执行&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            pauseableThreadPool.execute(runnable);</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">        pauseableThreadPool.pause();</span><br><span class="line">        System.out.println(<span class="string">&quot;线程池被暂停了&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">        pauseableThreadPool.resume();</span><br><span class="line">        System.out.println(<span class="string">&quot;线程池被恢复了&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="五、实现原理、源码分析"><a href="#五、实现原理、源码分析" class="headerlink" title="五、实现原理、源码分析"></a>五、实现原理、源码分析</h3><p>线程池组成部分：</p><ol><li>线程池管理器（创建线程等）</li><li>工作线程</li><li>任务队列</li><li>任务接口（Task）</li></ol><p>Executor家族：</p><p><img src="https://img-blog.csdnimg.cn/20200415153147473.png" alt="1586930768504"></p><p>Executor: 顶层接口，只有一个方法，就是执行任务的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ExecutorService: 增加了一些初步管理线程池的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExecutorService</span> <span class="keyword">extends</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">List&lt;Runnable&gt; <span class="title">shutdownNow</span><span class="params">()</span></span>;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isTerminated</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Executors: 工具类，帮助我们快速创建线程池用的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Executors</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                      <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略</span></span><br><span class="line">    </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>ThreadPoolExecutor: 创建线程池。</p><p>自定义创建线程池demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateThreadPoolDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> corePoolSize = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> maximumPoolSize = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">long</span> keepAliveTime = <span class="number">10</span>;</span><br><span class="line">        TimeUnit unit = TimeUnit.SECONDS;</span><br><span class="line">        BlockingQueue&lt;Runnable&gt; workQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        ThreadFactory threadFactory = <span class="keyword">new</span> NameTreadFactory();</span><br><span class="line">        RejectedExecutionHandler handler = <span class="keyword">new</span> MyIgnorePolicy();</span><br><span class="line">        ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(corePoolSize, maximumPoolSize, keepAliveTime, unit,</span><br><span class="line">                workQueue, threadFactory, handler);</span><br><span class="line">        executor.prestartAllCoreThreads(); <span class="comment">// 预启动所有核心线程</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            MyTask task = <span class="keyword">new</span> MyTask(String.valueOf(i));</span><br><span class="line">            executor.execute(task);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.in.read(); <span class="comment">//阻塞主线程</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NameTreadFactory</span> <span class="keyword">implements</span> <span class="title">ThreadFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger mThreadNum = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">            Thread t = <span class="keyword">new</span> Thread(r, <span class="string">&quot;my-thread-&quot;</span> + mThreadNum.getAndIncrement());</span><br><span class="line">            System.out.println(t.getName() + <span class="string">&quot; has been created&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyIgnorePolicy</span> <span class="keyword">implements</span> <span class="title">RejectedExecutionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class="line">            doLog(r, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doLog</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 可做日志记录等</span></span><br><span class="line">            System.err.println( r.toString() + <span class="string">&quot; rejected&quot;</span>);</span><br><span class="line"><span class="comment">//          System.out.println(&quot;completedTaskCount: &quot; + e.getCompletedTaskCount());</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyTask</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;MyTask [name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="keyword">this</span>.toString() + <span class="string">&quot; is running!&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>); <span class="comment">//让任务执行慢点</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>原理：</p><ul><li>相同线程执行不同任务。</li></ul><p>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">            <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            c = ctl.get();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"> <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runWorker</span><span class="params">(Worker w)</span> </span>&#123;</span><br><span class="line">        Thread wt = Thread.currentThread();</span><br><span class="line">        Runnable task = w.firstTask;</span><br><span class="line">        w.firstTask = <span class="keyword">null</span>;</span><br><span class="line">        w.unlock(); <span class="comment">// allow interrupts</span></span><br><span class="line">        <span class="keyword">boolean</span> completedAbruptly = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                w.lock();</span><br><span class="line">                <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class="line">                     (Thread.interrupted() &amp;&amp;</span><br><span class="line">                      runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class="line">                    !wt.isInterrupted())</span><br><span class="line">                    wt.interrupt();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    beforeExecute(wt, task);</span><br><span class="line">                    Throwable thrown = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        task.run();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RuntimeException x) &#123;</span><br><span class="line">                        thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Error x) &#123;</span><br><span class="line">                        thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">                        thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> Error(x);</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        afterExecute(task, thrown);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    task = <span class="keyword">null</span>;</span><br><span class="line">                    w.completedTasks++;</span><br><span class="line">                    w.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            completedAbruptly = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            processWorkerExit(w, completedAbruptly);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>首先检查工作线程是否小于corePoolSize,如果小于的话，就去增加worker,然后在worker类中，可以看到，首先先拿到一个任务，如果任务不为空就去运行任务。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Java并发（十三）–线程池详解&quot;&gt;&lt;a href=&quot;#Java并发（十三）–线程池详解&quot; class=&quot;headerlink&quot; title=&quot;Java并发（十三）–线程池详解&quot;&gt;&lt;/a&gt;Java并发（十三）–线程池详解&lt;/h2&gt;&lt;h3 id=&quot;目录&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    <category term="并发编程" scheme="http://example.com/categories/java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java并发" scheme="http://example.com/tags/Java%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>17. Apache DButils框架学习.md</title>
    <link href="http://example.com/2020/12/17/JSP%E5%92%8CServlet/17.%20Apache%20DButils%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2020/12/17/JSP%E5%92%8CServlet/17.%20Apache%20DButils%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-12-17T07:02:25.000Z</published>
    <updated>2020-12-17T08:01:02.047Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Apache-DButils框架学习"><a href="#Apache-DButils框架学习" class="headerlink" title="Apache DButils框架学习"></a>Apache DButils框架学习</h1><h2 id="一、commons-dbutils简介"><a href="#一、commons-dbutils简介" class="headerlink" title="一、commons-dbutils简介　"></a>一、commons-dbutils简介　</h2><p>　　commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装，学习成本极低，并且使用dbutils能极大简化jdbc编码的工作量，同时也不会影响程序的性能。因此dbutils成为很多不喜欢hibernate的公司的首选。</p><p>　　commons-dbutilsAPI介绍：</p><ul><li>org.apache.commons.dbutils.QueryRunner</li><li>org.apache.commons.dbutils.ResultSetHandler</li></ul><p>　　工具类</p><ul><li>org.apache.commons.dbutils.DbUtils</li></ul><h2 id="二、QueryRunner类使用讲解"><a href="#二、QueryRunner类使用讲解" class="headerlink" title="二、QueryRunner类使用讲解"></a>二、QueryRunner类使用讲解</h2><p>　　该类简单化了SQL查询，它与ResultSetHandler组合在一起使用可以完成大部分的数据库操作，能够大大减少编码量。<br>　　QueryRunner类提供了两个构造方法：</p><ul><li>默认的构造方法   <ul><li><strong>在调用QueryRunner方法时需要传入connection，这种是手动提交事务。</strong></li></ul></li><li>需要一个 javax.sql.DataSource 来作参数的构造方法。<ul><li><strong>在调用QueryRunner方法时不需要传入connection，这种是自动提交事务。</strong></li></ul></li></ul><h3 id="2-1、QueryRunner类的主要方法"><a href="#2-1、QueryRunner类的主要方法" class="headerlink" title="2.1、QueryRunner类的主要方法"></a>2.1、QueryRunner类的主要方法</h3><p>　　public Object query(Connection conn, String sql, Object[] params, ResultSetHandler rsh) throws SQLException：执行一个查询操作，在这个查询中，对象数组中的每个元素值被用来作为查询语句的置换参数。该方法会自行处理 PreparedStatement 和 ResultSet 的创建和关闭。<br>　　public Object query(String sql, Object[] params, ResultSetHandler rsh) throws SQLException:　几乎与第一种方法一样；唯一的不同在于它不将数据库连接提供给方法，并且它是从提供给构造方法的数据源(DataSource) 或使用的setDataSource 方法中重新获得 Connection。<br>　　public Object query(Connection conn, String sql, ResultSetHandler rsh) throws SQLException : 执行一个不需要置换参数的查询操作。<br>　　public int update(Connection conn, String sql, Object[] params) throws SQLException:用来执行一个更新（插入、更新或删除）操作。<br>　　public int update(Connection conn, String sql) throws SQLException：用来执行一个不需要置换参数的更新操作。</p><h3 id="2-2、使用QueryRunner类实现CRUD"><a href="#2-2、使用QueryRunner类实现CRUD" class="headerlink" title="2.2、使用QueryRunner类实现CRUD"></a>2.2、使用QueryRunner类实现CRUD</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> apachedbutils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> entiy.Student;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.*;</span><br><span class="line"><span class="keyword">import</span> util.JdbcUtil_Druid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoup</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/10 15:34</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@describe</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApacheDbutilsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//将数据源传递给QueryRunner，QueryRunner内部通过数据源获取数据库连接</span></span><br><span class="line">        QueryRunner runner = <span class="keyword">new</span> QueryRunner(JdbcUtil_Druid.ds);</span><br><span class="line">        String sql = <span class="string">&quot;insert into student(sno,sname,sage,saddr) values(?,?,?,?)&quot;</span>;</span><br><span class="line">        Object params[] = &#123;<span class="string">&quot;1&quot;</span>, <span class="string">&quot;小王&quot;</span>, <span class="string">&quot;22&quot;</span>, <span class="string">&quot;上海&quot;</span>&#125;;</span><br><span class="line">        runner.update(sql, params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//将数据源传递给QueryRunner，QueryRunner内部通过数据源获取数据库连接</span></span><br><span class="line">        QueryRunner runner = <span class="keyword">new</span> QueryRunner(JdbcUtil_Druid.ds);</span><br><span class="line">        String sql = <span class="string">&quot;update student set sname = ? where sno = ?&quot;</span>;</span><br><span class="line">        Object params[] = &#123;<span class="string">&quot;小xi&quot;</span>, <span class="string">&quot;2&quot;</span>&#125;;</span><br><span class="line">        runner.update(sql, params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//将数据源传递给QueryRunner，QueryRunner内部通过数据源获取数据库连接</span></span><br><span class="line">        QueryRunner runner = <span class="keyword">new</span> QueryRunner(JdbcUtil_Druid.ds);</span><br><span class="line">        String sql = <span class="string">&quot;delete from student where sno = ?&quot;</span>;</span><br><span class="line">        Object params[] = &#123;<span class="number">8</span>&#125;;</span><br><span class="line">        runner.update(sql, params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将结果集中的第一行数据封装到一个对应的JavaBean实例中。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findOne</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//将数据源传递给QueryRunner，QueryRunner内部通过数据源获取数据库连接</span></span><br><span class="line">        QueryRunner runner = <span class="keyword">new</span> QueryRunner(JdbcUtil_Druid.ds);</span><br><span class="line">        String sql = <span class="string">&quot;select * from student where sno = ?&quot;</span>;</span><br><span class="line">        Object params[] = &#123;<span class="number">2</span>&#125;;</span><br><span class="line">        Student student = (Student) runner.query(sql, params, <span class="keyword">new</span> BeanHandler(Student.class));</span><br><span class="line">        System.out.println(student.getSname());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//将数据源传递给QueryRunner，QueryRunner内部通过数据源获取数据库连接</span></span><br><span class="line">        QueryRunner runner = <span class="keyword">new</span> QueryRunner(JdbcUtil_Druid.ds);</span><br><span class="line">        String sql = <span class="string">&quot;select * from student&quot;</span>;</span><br><span class="line">        List&lt;Student&gt; studentList = runner.query(sql, <span class="keyword">new</span> BeanListHandler&lt;Student&gt;(Student.class));</span><br><span class="line">        <span class="keyword">for</span> (Student student : studentList) &#123;</span><br><span class="line">            System.out.println(student.getSname());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把结果集中的每一行数据都转成一个数组，再存放到List中。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testArrayListHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//将数据源传递给QueryRunner，QueryRunner内部通过数据源获取数据库连接</span></span><br><span class="line">        QueryRunner runner = <span class="keyword">new</span> QueryRunner(JdbcUtil_Druid.ds);</span><br><span class="line">        String sql = <span class="string">&quot;select * from student&quot;</span>;</span><br><span class="line">        List&lt;Object[]&gt; studentList = runner.query(sql, <span class="keyword">new</span> ArrayListHandler());</span><br><span class="line">        <span class="keyword">for</span> (Object[] student : studentList) &#123;</span><br><span class="line">            System.out.println(student[<span class="number">0</span>] + <span class="string">&quot; &quot;</span> + student[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把结果集中的第一行数据转成对象数组。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testArrayHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//将数据源传递给QueryRunner，QueryRunner内部通过数据源获取数据库连接</span></span><br><span class="line">        QueryRunner runner = <span class="keyword">new</span> QueryRunner(JdbcUtil_Druid.ds);</span><br><span class="line">        String sql = <span class="string">&quot;select * from student&quot;</span>;</span><br><span class="line">        Object[] student = runner.query(sql, <span class="keyword">new</span> ArrayHandler());</span><br><span class="line">        System.out.println(student[<span class="number">0</span>] + <span class="string">&quot; &quot;</span> + student[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ColumnListHandler：将结果集中某一列的数据存放到List中。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testColumnListHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//将数据源传递给QueryRunner，QueryRunner内部通过数据源获取数据库连接</span></span><br><span class="line">        QueryRunner runner = <span class="keyword">new</span> QueryRunner(JdbcUtil_Druid.ds);</span><br><span class="line">        String sql = <span class="string">&quot;select * from student&quot;</span>;</span><br><span class="line">        List&lt;Object&gt; list = runner.query(sql, <span class="keyword">new</span> ColumnListHandler&lt;&gt;(<span class="string">&quot;sname&quot;</span>));</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//KeyedHandler(name)：将结果集中的每一行数据都封装到一个Map里，再把这些map再存到一个map里，其key为指定的key。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testKeyedHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//将数据源传递给QueryRunner，QueryRunner内部通过数据源获取数据库连接</span></span><br><span class="line">        QueryRunner qr = <span class="keyword">new</span> QueryRunner(JdbcUtil_Druid.ds);</span><br><span class="line">        String sql = <span class="string">&quot;select * from student&quot;</span>;</span><br><span class="line">        Map&lt;Integer,Map&gt; map = (Map) qr.query(sql, <span class="keyword">new</span> KeyedHandler(<span class="string">&quot;sno&quot;</span>));</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Integer, Map&gt; me : map.entrySet())&#123;</span><br><span class="line">            <span class="keyword">int</span>  id = me.getKey();</span><br><span class="line">            Map&lt;String,Object&gt; innermap = me.getValue();</span><br><span class="line">            <span class="keyword">for</span>(Map.Entry&lt;String, Object&gt; innerme : innermap.entrySet())&#123;</span><br><span class="line">                String columnName = innerme.getKey();</span><br><span class="line">                Object value = innerme.getValue();</span><br><span class="line">                System.out.println(columnName + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">                &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//MapHandler：将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testMapHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//将数据源传递给QueryRunner，QueryRunner内部通过数据源获取数据库连接</span></span><br><span class="line">        QueryRunner runner = <span class="keyword">new</span> QueryRunner(JdbcUtil_Druid.ds);</span><br><span class="line">        String sql = <span class="string">&quot;select * from student&quot;</span>;</span><br><span class="line">        Map&lt;String, Object&gt; query = runner.query(sql, <span class="keyword">new</span> MapHandler());</span><br><span class="line">        System.out.println(query);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//MapListHandler：将结果集中的每一行数据都封装到一个Map里，然后再存放到List</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testMapListHandler</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//将数据源传递给QueryRunner，QueryRunner内部通过数据源获取数据库连接</span></span><br><span class="line">        QueryRunner runner = <span class="keyword">new</span> QueryRunner(JdbcUtil_Druid.ds);</span><br><span class="line">        String sql = <span class="string">&quot;select * from student&quot;</span>;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; query = runner.query(sql, <span class="keyword">new</span> MapListHandler());</span><br><span class="line">        System.out.println(query);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//add();</span></span><br><span class="line">            <span class="comment">//update();</span></span><br><span class="line">            <span class="comment">//delete();</span></span><br><span class="line">            <span class="comment">//findOne();</span></span><br><span class="line">            <span class="comment">//findAll();</span></span><br><span class="line">            <span class="comment">//testArrayListHandler();</span></span><br><span class="line">            <span class="comment">//testArrayHandler();</span></span><br><span class="line">            <span class="comment">//testColumnListHandler();</span></span><br><span class="line">            <span class="comment">//testKeyedHandler();</span></span><br><span class="line"><span class="comment">//            testMapHandler();</span></span><br><span class="line">            testMapListHandler();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、ResultSetHandler接口使用讲解"><a href="#三、ResultSetHandler接口使用讲解" class="headerlink" title="三、ResultSetHandler接口使用讲解"></a>三、ResultSetHandler接口使用讲解</h2><p>　　该接口用于处理java.sql.ResultSet，将数据按要求转换为另一种形式。<br>　　ResultSetHandler接口提供了一个单独的方法：Object handle (java.sql.ResultSet .rs)</p><h3 id="3-1、ResultSetHandler接口的实现类"><a href="#3-1、ResultSetHandler接口的实现类" class="headerlink" title="3.1、ResultSetHandler接口的实现类"></a>3.1、ResultSetHandler接口的实现类</h3><ul><li>ArrayHandler：把结果集中的<strong>第一行</strong>数据转成对象数组。</li><li>ArrayListHandler：把结果集中的每一行数据都转成一个数组，再存放到List中。</li><li>BeanHandler：将结果集中的<strong>第一行</strong>数据封装到一个对应的JavaBean实例中。</li><li>BeanListHandler：将结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里。</li><li>ColumnListHandler：将结果集中某一列的数据存放到List中。</li><li>KeyedHandler(name)：将结果集中的每一行数据都封装到一个Map里，再把这些map再存到一个map里，其key为指定的key。</li><li>MapHandler：将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值。</li><li>MapListHandler：将结果集中的每一行数据都封装到一个Map里，然后再存放到List</li></ul><h3 id="3-2、测试dbutils各种类型的处理器"><a href="#3-2、测试dbutils各种类型的处理器" class="headerlink" title="3.2、测试dbutils各种类型的处理器"></a>3.2、测试dbutils各种类型的处理器</h3><p><strong>代码在上</strong></p><h2 id="三、DbUtils类使用讲解"><a href="#三、DbUtils类使用讲解" class="headerlink" title="三、DbUtils类使用讲解"></a>三、DbUtils类使用讲解</h2><p>　　DbUtils ：提供如关闭连接、装载JDBC驱动程序等常规工作的工具类，里面的所有方法都是静态的。主要方法如下：<br>　　public static void close(…) throws java.sql.SQLException：　DbUtils类提供了三个重载的关闭方法。这些方法检查所提供的参数是不是NULL，如果不是的话，它们就关闭Connection、Statement和ResultSet。<br>　　public static void closeQuietly(…): 这一类方法不仅能在Connection、Statement和ResultSet为NULL情况下避免关闭，还能隐藏一些在程序中抛出的SQLEeception。<br>　　public static void commitAndCloseQuietly(Connection conn)： 用来提交连接，然后关闭连接，并且在关闭连接时不抛出SQL异常。<br>　　public static boolean loadDriver(java.lang.String driverClassName)：这一方装载并注册JDBC驱动程序，如果成功就返回true。使用该方法，你不需要捕捉这个异常ClassNotFoundException。</p><h2 id="四、JDBC开发中的事务处理"><a href="#四、JDBC开发中的事务处理" class="headerlink" title="四、JDBC开发中的事务处理"></a>四、JDBC开发中的事务处理</h2><p>　　在开发中，对数据库的多个表或者对一个表中的多条数据执行更新操作时要保证对多个更新操作要么同时成功，要么都不成功，这就涉及到对多个更新操作的事务管理问题了。比如银行业务中的转账问题，A用户向B用户转账100元，假设A用户和B用户的钱都存储在Account表，那么A用户向B用户转账时就涉及到同时更新Account表中的A用户的钱和B用户的钱，用SQL来表示就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 update account set money&#x3D;money-100 where name&#x3D;&#39;A&#39;</span><br><span class="line">2 update account set money&#x3D;money+100 where name&#x3D;&#39;B&#39;</span><br></pre></td></tr></table></figure><p>为了能够让事务处理更加优雅，我们使用ThreadLocal类进行改造，<strong>ThreadLocal一个容器，向这个容器存储的对象，在当前线程范围内都可以取得出来，向ThreadLocal里面存东西就是向它里面的Map存东西的，然后ThreadLocal把这个Map挂到当前的线程底下，这样Map就只属于这个线程了</strong></p><p><strong>AccountDao2：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> entiy.Account;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class="line"><span class="keyword">import</span> util.JdbcUtil_DruidWithThreadLocal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoup</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/11 9:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@describe</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDao2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Account account)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        QueryRunner qr = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">        String sql = <span class="string">&quot;update account set name=?,money=? where id=?&quot;</span>;</span><br><span class="line">        Object params[] = &#123;account.getName(),account.getMoney(),account.getId()&#125;;</span><br><span class="line">        <span class="comment">//JdbcUtils2.getConnection()获取当前线程中的Connection对象</span></span><br><span class="line">        qr.update(JdbcUtil_DruidWithThreadLocal.getConnection(),sql, params);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">find</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">        QueryRunner qr = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">        String sql = <span class="string">&quot;select * from account where id=?&quot;</span>;</span><br><span class="line">        <span class="comment">//JdbcUtils2.getConnection()获取当前线程中的Connection对象</span></span><br><span class="line">        <span class="keyword">return</span> (Account) qr.query(JdbcUtil_DruidWithThreadLocal.getConnection(),sql, id, <span class="keyword">new</span> BeanHandler(Account.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>AccountService2:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dao.AccountDao2;</span><br><span class="line"><span class="keyword">import</span> entiy.Account;</span><br><span class="line"><span class="keyword">import</span> util.JdbcUtil_DruidWithThreadLocal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoup</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/11 9:54</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@describe</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountService2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(<span class="keyword">int</span> sourceid, <span class="keyword">int</span> tartgetid, <span class="keyword">float</span> money)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//开启事务，在业务层处理事务，保证dao层的多个操作在同一个事务中进行</span></span><br><span class="line">            JdbcUtil_DruidWithThreadLocal.startTransaction();</span><br><span class="line">            AccountDao2 dao = <span class="keyword">new</span> AccountDao2();</span><br><span class="line"></span><br><span class="line">            Account source = dao.find(sourceid);</span><br><span class="line">            Account target = dao.find(tartgetid);</span><br><span class="line">            source.setMoney(source.getMoney()-money);</span><br><span class="line">            target.setMoney(target.getMoney()+money);</span><br><span class="line"></span><br><span class="line">            dao.update(source);</span><br><span class="line">            <span class="comment">//模拟程序出现异常让事务回滚</span></span><br><span class="line">            <span class="keyword">int</span> x = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">            dao.update(target);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//SQL正常执行之后提交事务</span></span><br><span class="line">            JdbcUtil_DruidWithThreadLocal.commit();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;回滚&quot;</span>);</span><br><span class="line">            <span class="comment">//出现异常之后就回滚事务</span></span><br><span class="line">            JdbcUtil_DruidWithThreadLocal.rollback();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//关闭数据库连接</span></span><br><span class="line">            JdbcUtil_DruidWithThreadLocal.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//transfer(&quot;A&quot;, &quot;B&quot;, (float) 100.0);</span></span><br><span class="line">        transfer(<span class="number">1</span>, <span class="number">2</span>, (<span class="keyword">float</span>) <span class="number">100.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>JdbcUtil_DruidWithThreadLocal:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoup</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/11 9:44</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@describe</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtil_DruidWithThreadLocal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用ThreadLocal存储当前线程中的Connection对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Connection&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;Connection&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在java中，编写数据库连接池需实现java.sql.DataSource接口，每一种数据库连接池都是DataSource接口的实现</span></span><br><span class="line"><span class="comment">     * DBCP连接池就是java.sql.DataSource接口的一个具体实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DataSource ds = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//在静态代码块中创建数据库连接池</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//加载dbcpconfig.properties配置文件</span></span><br><span class="line">            InputStream in = JdbcUtil_DBCP.class.getClassLoader().getResourceAsStream(<span class="string">&quot;resource/db.properties&quot;</span>);</span><br><span class="line">            Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">            prop.load(in);</span><br><span class="line">            <span class="comment">//创建数据源</span></span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(prop);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Method</span>: getConnection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 从数据源中获取数据库连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Connection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//从当前线程中获取Connection</span></span><br><span class="line">        Connection connection = threadLocal.get();</span><br><span class="line">        <span class="keyword">if</span> (connection == <span class="keyword">null</span>)&#123;</span><br><span class="line">            connection = ds.getConnection();</span><br><span class="line">            threadLocal.set(connection);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  connection;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Method</span>: startTransaction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 开启事务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Anthor</span>:孤傲苍狼</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startTransaction</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Connection conn =  threadLocal.get();</span><br><span class="line">            <span class="keyword">if</span>(conn==<span class="keyword">null</span>)&#123;</span><br><span class="line">                conn = getConnection();</span><br><span class="line">                <span class="comment">//把 conn绑定到当前线程上</span></span><br><span class="line">                threadLocal.set(conn);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Method</span>: rollback</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>:回滚事务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Anthor</span>:孤傲苍狼</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//从当前线程中获取Connection</span></span><br><span class="line">            Connection conn = threadLocal.get();</span><br><span class="line">            <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//回滚事务</span></span><br><span class="line">                conn.rollback();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Method</span>: commit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>:提交事务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Anthor</span>:孤傲苍狼</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//从当前线程中获取Connection</span></span><br><span class="line">            Connection conn = threadLocal.get();</span><br><span class="line">            <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//提交事务</span></span><br><span class="line">                conn.commit();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Method</span>: close</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>:关闭数据库连接(注意，并不是真的关闭，而是把连接还给数据库连接池)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Anthor</span>:孤傲苍狼</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//从当前线程中获取Connection</span></span><br><span class="line">            Connection conn = threadLocal.get();</span><br><span class="line">            <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                conn.close();</span><br><span class="line">                <span class="comment">//解除当前线程上绑定conn</span></span><br><span class="line">                threadLocal.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Method</span>: getDataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 获取数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Anthor</span>:孤傲苍狼</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> DataSource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//从数据源中获取数据库连接</span></span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Method</span>: release</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 释放资源，</span></span><br><span class="line"><span class="comment">     * 释放的资源包括Connection数据库连接对象，负责执行SQL命令的Statement对象，存储查询结果的ResultSet对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> st</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Connection connection, Statement st, ResultSet rs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//关闭存储查询结果的ResultSet对象</span></span><br><span class="line">                rs.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            rs = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(st!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//关闭负责执行SQL命令的Statement对象</span></span><br><span class="line">                st.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//关闭Connection数据库连接对象</span></span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">executeUpdate</span><span class="params">(String sql, Object[] params)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pstmt = createPreparedStatement(sql, params);</span><br><span class="line">            <span class="keyword">int</span> count = pstmt.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtil_DBCP.release(getConnection(), pstmt, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultSet <span class="title">executeQuery</span><span class="params">(String sql, Object[] params)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pstmt = createPreparedStatement(sql, params);</span><br><span class="line">            rs = pstmt.executeQuery();</span><br><span class="line">            <span class="keyword">return</span> rs;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取PreparedStatement对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PreparedStatement <span class="title">createPreparedStatement</span><span class="params">(String sql, Object[] params)</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException </span>&#123;</span><br><span class="line">        pstmt = getConnection().prepareStatement(sql);</span><br><span class="line">        <span class="keyword">if</span> (params != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; params.length; i++) &#123;</span><br><span class="line">                pstmt.setObject(i+<span class="number">1</span>, params[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  pstmt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Apache-DButils框架学习&quot;&gt;&lt;a href=&quot;#Apache-DButils框架学习&quot; class=&quot;headerlink&quot; title=&quot;Apache DButils框架学习&quot;&gt;&lt;/a&gt;Apache DButils框架学习&lt;/h1&gt;&lt;h2 id=&quot;一</summary>
      
    
    
    
    <category term="jsp" scheme="http://example.com/categories/jsp/"/>
    
    
    <category term="jsp" scheme="http://example.com/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>JSP环境搭建和入门</title>
    <link href="http://example.com/2020/12/17/JSP%E5%92%8CServlet/1.JSP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2020/12/17/JSP%E5%92%8CServlet/1.JSP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E5%85%A5%E9%97%A8/</id>
    <published>2020-12-17T07:02:25.000Z</published>
    <updated>2020-12-17T08:01:01.935Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JSP环境搭建和入门"><a href="#JSP环境搭建和入门" class="headerlink" title="JSP环境搭建和入门"></a>JSP环境搭建和入门</h2><h3 id="1-tomcat的目录"><a href="#1-tomcat的目录" class="headerlink" title="1.tomcat的目录"></a>1.tomcat的目录</h3><p>bin:可执行文件（startup.bat   shutdown.bat）</p><p>conf：配置文件（server.conf）</p><p>lib：tomcat依赖的jar文件</p><p>log：日志文件（记录出错信息等）</p><p>temp：临时文件</p><p>webapps：可执行的项目（我们开发的项目 放到该目录）</p><p>work：存放有JSP翻译成的Java，以及编辑成的class文件。</p><p>默认端口号：8080</p><p>修改端口号：server.conf</p><p>启动：去bin目录双击startup.bat</p><p>访问localhost:8080</p><p>默认访问：web.xml中设置的</p><p>配置虚拟路劲：</p><p>第一种方式：server.xml中的<host>目录中，需要重启tomcat</p><p>​    配置：<Context docBase='项目实际路径' path='绝对路劲或者相对路径（相对于webapps）'/></p><p>第二种方式：在E:\tomcat8\apache-tomcat-8.0.50\conf\Catalina\localhost中新增一个文件，文件名为“项目名.xml”，新增一行：<Context docBase='项目实际路径' path='绝对路劲或者相对路径（相对于webapps）'/>。</p><h3 id="2-JSP执行流程"><a href="#2-JSP执行流程" class="headerlink" title="2.JSP执行流程"></a>2.JSP执行流程</h3><p>jsp—翻译成Java（Servlet）—编译成class文件</p><p>jsp和servlet可以相互转换</p><p>第一次访问比较慢，要生成Java和class文件。后续比较快，可以直接访问class文件。</p><p>如果修改了jsp文件，就需要再次生成class文件。</p><h3 id="3-JSP实际开发"><a href="#3-JSP实际开发" class="headerlink" title="3.JSP实际开发"></a>3.JSP实际开发</h3><p>​    创建项目：<a href="https://blog.csdn.net/a145127/article/details/84893355">https://blog.csdn.net/a145127/article/details/84893355</a></p><p>​    或者查看自己笔记</p><p>统一字符集编码：</p><p>​    1.设置JSP文件的编码：jsp文件中的pageEncoding属性。</p><p>​    2.设置浏览器读取JSP的编码：jsp文件中的content属性。</p><p>​    一般设置成一样的编码，推荐UTF-8</p><p>​    文本编码：</p><p>​        1.将整个IDEA中的文件 统一设置</p><p>​        2.设置某一个项目</p><p>​        3.设置单独文件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JSP环境搭建和入门&quot;&gt;&lt;a href=&quot;#JSP环境搭建和入门&quot; class=&quot;headerlink&quot; title=&quot;JSP环境搭建和入门&quot;&gt;&lt;/a&gt;JSP环境搭建和入门&lt;/h2&gt;&lt;h3 id=&quot;1-tomcat的目录&quot;&gt;&lt;a href=&quot;#1-tomcat的目</summary>
      
    
    
    
    <category term="jsp" scheme="http://example.com/categories/jsp/"/>
    
    
    <category term="jsp" scheme="http://example.com/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>Java并发--多线程概念的建立</title>
    <link href="http://example.com/2020/12/17/java%E5%B9%B6%E5%8F%91/Java%E5%B9%B6%E5%8F%91--%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A6%82%E5%BF%B5%E7%9A%84%E5%BB%BA%E7%AB%8B/"/>
    <id>http://example.com/2020/12/17/java%E5%B9%B6%E5%8F%91/Java%E5%B9%B6%E5%8F%91--%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A6%82%E5%BF%B5%E7%9A%84%E5%BB%BA%E7%AB%8B/</id>
    <published>2020-12-17T07:02:25.000Z</published>
    <updated>2020-12-17T08:01:01.849Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java并发–多线程概念的建立"><a href="#Java并发–多线程概念的建立" class="headerlink" title="Java并发–多线程概念的建立"></a>Java并发–多线程概念的建立</h2><h3 id="1、什么是进程？"><a href="#1、什么是进程？" class="headerlink" title="1、什么是进程？"></a>1、什么是进程？</h3><p>​        进程是程序的真正运行实例，是操作系统资源分配的基本单位。</p><h3 id="2、什么是线程？"><a href="#2、什么是线程？" class="headerlink" title="2、什么是线程？"></a>2、什么是线程？</h3><p>​        线程是CPU的基本调度单位，每个线程执行的都是进程代码的某个片段。</p><h3 id="3、进程和线程的区别"><a href="#3、进程和线程的区别" class="headerlink" title="3、进程和线程的区别"></a>3、进程和线程的区别</h3><ol><li><p>概念不同</p><pre><code> 1. 进程是可以真正运行的程序实例，是操作系统资源分配的基本单位。线程是CPU的基本调度单位。</code></pre></li><li><p>内存共享方式不同</p><p>​    进程之间一般操作系统有分配独立的内存，不同进程之间无法访问，只能通过进程间通信IPC。线程操作系统不会分配独立的内存，线程之间共享进程的内存。线程独立的有自己独立的堆栈。</p><ol><li>数量不同</li><li>开销不同</li></ol></li></ol><p>相似点：生命周期</p><h3 id="4、Java语言和多线程的渊源"><a href="#4、Java语言和多线程的渊源" class="headerlink" title="4、Java语言和多线程的渊源"></a>4、Java语言和多线程的渊源</h3><p>​    即使不创建线程，在执行main方法的时候，JVM会自动创建其他线程。</p><pre><code> 1. Singal Dispatcher  //负责把操作系统发来的信号分发给适当的处理程序 2. Finalized    //负责对象的finalize（）方法 3. Reference Handler  //和GC、引用相关的线程 4. main   //主线程，用户程序的入口。</code></pre><h3 id="5、多线程"><a href="#5、多线程" class="headerlink" title="5、多线程"></a>5、多线程</h3><h4 id="5-1-什么是多线程？"><a href="#5-1-什么是多线程？" class="headerlink" title="5.1 什么是多线程？"></a>5.1 什么是多线程？</h4><p>​    如果一个程序允许两个或以上的线程，那么它就是多线程程序，多线程是指单个进程中运行多个线程。</p><h4 id="5-2-为什么使用多线程？"><a href="#5-2-为什么使用多线程？" class="headerlink" title="5.2 为什么使用多线程？"></a>5.2 为什么使用多线程？</h4><ul><li>最主要的目的是提高CPU利用率</li><li>提高处理速度</li><li>避免无效等待</li><li>提高用户体验</li></ul><h4 id="5-3-什么场景需要使用多线程？"><a href="#5-3-什么场景需要使用多线程？" class="headerlink" title="5.3 什么场景需要使用多线程？"></a>5.3 什么场景需要使用多线程？</h4><ul><li>为了同时处理多件不同的事</li><li>为了提高工作效率、处理能力。<ul><li>需要同时有很大并发量的时候。</li></ul></li></ul><h4 id="5-4-多线程带来的问题或局限"><a href="#5-4-多线程带来的问题或局限" class="headerlink" title="5.4 多线程带来的问题或局限"></a>5.4 多线程带来的问题或局限</h4><ol><li>性能问题：上下文切换带来的消耗</li><li>线程安全问题：包括数据安全问题（i++总数不一致）以及线程带来的活跃性问题（线程饥饿、死锁）。</li></ol><h3 id="6-、串行、并行、并发"><a href="#6-、串行、并行、并发" class="headerlink" title="6 、串行、并行、并发"></a>6 、串行、并行、并发</h3><ol><li><p>串行：</p><p>两个任务排队执行。</p></li><li><p>并行：</p><p>真正的同时运行在同一时刻，有多个任务同时执行。如在多核处理器上，有两个线程同时执行一段代码。</p></li><li><p>并发：</p><p>并发偏重于多个任务交替执行，多个任务有可能是串行的。v</p></li></ol><h3 id="7、高并发与多线程"><a href="#7、高并发与多线程" class="headerlink" title="7、高并发与多线程"></a>7、高并发与多线程</h3><p>高并发:代表一种状态，指在同一个时间点，有很多用户同时的访问同一 API 接口或者 Url 地址。</p><p>高并发指标：</p><ul><li>QPS：每秒查询数</li><li>带宽</li><li>PV（page view）</li><li>UV (Unique view)</li><li>并发连接数</li><li>服务器平均请求等待时间</li></ul><h3 id="8、同步与异步、阻塞与非阻塞"><a href="#8、同步与异步、阻塞与非阻塞" class="headerlink" title="8、同步与异步、阻塞与非阻塞"></a>8、同步与异步、阻塞与非阻塞</h3><p>同步：同步方法调用一旦开始，调用者必须等到方法调用返回后，才能继续后续的行为。</p><p>异步：异步方法调用更像是一个消息传递，一旦开始，方法调用会立即返回，调用者就可以继续后续的操作。</p><p>阻塞：比如一个线程占用了临界区资源，其他线程需要等待导致线程挂起，这种叫做阻塞。</p><p>非阻塞：强调没有一个线程可以妨碍其他线程执行，所有的线程都会尝试不断向前执行。</p><h3 id="9、临界区"><a href="#9、临界区" class="headerlink" title="9、临界区"></a>9、临界区</h3><p>临界区用来表示一种公共资源或者说共享数据，可以被多个线程使用，但是一次只能有一个线程使用它，一旦临界区资源被占用，其他线程想要使用这个资源必须等待。</p><h3 id="10、死锁、饥饿、活锁"><a href="#10、死锁、饥饿、活锁" class="headerlink" title="10、死锁、饥饿、活锁"></a>10、死锁、饥饿、活锁</h3><p>死锁：指两个或两个以上的线程由于竞争资源而互相等待导致阻塞的现象。</p><p>饥饿：指一个或多个线程因为种种原因无法获得所要的资源，导致一直无法执行。</p><p> 原因：</p><p>1.优先级比较低，导致资源不断被高优先级的抢占。</p><p> 2.某个线程一直占用资源不放。</p><p>活锁：线程都主动将资源释放给其他线程使用，导致资源不断的在线程间跳动，导致没有一个线程可以真正同时拿到所有资源正常执行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Java并发–多线程概念的建立&quot;&gt;&lt;a href=&quot;#Java并发–多线程概念的建立&quot; class=&quot;headerlink&quot; title=&quot;Java并发–多线程概念的建立&quot;&gt;&lt;/a&gt;Java并发–多线程概念的建立&lt;/h2&gt;&lt;h3 id=&quot;1、什么是进程？&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    <category term="并发编程" scheme="http://example.com/categories/java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java并发" scheme="http://example.com/tags/Java%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Java并发--线程并发基础常见问题</title>
    <link href="http://example.com/2020/12/17/java%E5%B9%B6%E5%8F%91/Java%E5%B9%B6%E5%8F%91--%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2020/12/17/java%E5%B9%B6%E5%8F%91/Java%E5%B9%B6%E5%8F%91--%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</id>
    <published>2020-12-17T07:02:25.000Z</published>
    <updated>2020-12-17T07:48:56.613Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java并发线程基础常见问题"><a href="#Java并发线程基础常见问题" class="headerlink" title="Java并发线程基础常见问题"></a>Java并发线程基础常见问题</h2><ol><li>有多少种线程实现方式?</li><li>实现Runnable接口和继承Thread类哪种更好？</li><li>一个线程调用两次start()会出现什么情况？为什么？</li><li>既然start（）方法会调用run()方法，为什么不直接调用run（）方法？</li><li>如何停止线程？</li><li>如何处理不可中断的阻塞？</li><li>线程有哪几种状态？生命周期是什么？</li><li>用程序实现交替打印0-100的奇偶数。</li><li>手写生产者消费者模式。</li><li>为什么wait()需要在同步代码块中使用，而sleep()不需要？</li><li>为什么线程通信的方法wait()、notify()、notifyAll()被定义在Object类中，而sleep（）定义在Thread类中？</li><li>如何选择用notify（）和notifyAll（）?</li><li>notifyAll()之后的线程都会再次抢锁，如果抢夺失败怎么办？</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Java并发线程基础常见问题&quot;&gt;&lt;a href=&quot;#Java并发线程基础常见问题&quot; class=&quot;headerlink&quot; title=&quot;Java并发线程基础常见问题&quot;&gt;&lt;/a&gt;Java并发线程基础常见问题&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;有多少种线程实现方式?&lt;/li&gt;</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    <category term="并发编程" scheme="http://example.com/categories/java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java并发" scheme="http://example.com/tags/Java%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
</feed>
